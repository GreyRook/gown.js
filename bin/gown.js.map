{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/index","src/core/Control.js","src/core/Skinable.js","src/core/controls/Application.js","src/core/controls/Button.js","src/core/controls/CheckBox.js","src/core/controls/InputControl.js","src/core/controls/LayoutGroup.js","src/core/controls/ScrollArea.js","src/core/controls/ScrollBar.js","src/core/controls/ScrollThumb.js","src/core/controls/Scrollable.js","src/core/controls/Slider.js","src/core/controls/TextInput.js","src/core/controls/ToggleButton.js","src/core/index.js","src/core/layout/HorizontalLayout.js","src/core/layout/Layout.js","src/core/layout/LayoutAlignment.js","src/core/layout/TiledColumnsLayout.js","src/core/layout/TiledLayout.js","src/core/layout/TiledRowsLayout.js","src/core/layout/VerticalLayout.js","src/core/layout/ViewPortBounds.js","src/core/shapes/Diamond.js","src/core/shapes/Ellipse.js","src/core/shapes/Line.js","src/core/shapes/Rect.js","src/core/shapes/Shape.js","src/core/skin/Theme.js","src/core/skin/ThemeFont.js","src/utils/InputWrapper.js","src/utils/ScaleContainer.js","src/utils/SliderData.js","src/utils/index.js","src/utils/mixin.js","src/utils/mouseWheelSupport.js","src/utils/position.js","src/utils/resizeScaling.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxjtxjTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrzjxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnzhTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpjpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClfile":"gown.js","sourceRoot":"./","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function (global){\nif (typeof PIXI === 'undefined') {\n    if (window.console) {\n        window.console.warn('pixi.js has to be loaded before loading gown.js');\n    }\n} else {\n\n    var core = module.exports = require('./core');\n\n    // add core plugins.\n    core.utils          = require('./utils');\n\n    // use default pixi loader\n    core.loader = PIXI.loader;\n\n    // mixin the deprecation features.\n    //Object.assign(core, require('./deprecation'));\n\n    // export GOWN globally.\n    global.GOWN = core;\n\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgUElYSSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAod2luZG93LmNvbnNvbGUpIHtcbiAgICAgICAgd2luZG93LmNvbnNvbGUud2FybigncGl4aS5qcyBoYXMgdG8gYmUgbG9hZGVkIGJlZm9yZSBsb2FkaW5nIGdvd24uanMnKTtcbiAgICB9XG59IGVsc2Uge1xuXG4gICAgdmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29yZScpO1xuXG4gICAgLy8gYWRkIGNvcmUgcGx1Z2lucy5cbiAgICBjb3JlLnV0aWxzICAgICAgICAgID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4gICAgLy8gdXNlIGRlZmF1bHQgcGl4aSBsb2FkZXJcbiAgICBjb3JlLmxvYWRlciA9IFBJWEkubG9hZGVyO1xuXG4gICAgLy8gbWl4aW4gdGhlIGRlcHJlY2F0aW9uIGZlYXR1cmVzLlxuICAgIC8vT2JqZWN0LmFzc2lnbihjb3JlLCByZXF1aXJlKCcuL2RlcHJlY2F0aW9uJykpO1xuXG4gICAgLy8gZXhwb3J0IEdPV04gZ2xvYmFsbHkuXG4gICAgZ2xvYmFsLkdPV04gPSBjb3JlO1xuXG59XG4iXX0=","/**\n * base for all UI controls (see controls/)\n * based on pixi-DisplayContainer that supports adding children, so all\n * controls are container\n * @class Control\n * @extends PIXI.Container\n * @memberof GOWN\n * @constructor\n */\nfunction Control() {\n    PIXI.Container.call(this);\n    this.enabled = this.enabled !== false;\n    // assume all controls are interactive\n    this.interactive = true;\n}\n\nControl.prototype = Object.create( PIXI.Container.prototype );\nControl.prototype.constructor = Control;\nmodule.exports = Control;\n\n/**\n * change the theme (every control can have a theme, even if it does not\n * inherit Skinable, e.g. if there is only some color in the skin that will\n * be taken)\n *\n * @method setTheme\n * @param theme the new theme {Theme}\n */\nControl.prototype.setTheme = function(theme) {\n    if (theme === this.theme && theme) {\n        return;\n    }\n\n    this.theme = theme;\n    this.invalidSkin = true;\n};\n\n/**\n * PIXI method to update the object transform for rendering\n * Used to call redraw() before rendering\n *\n * @method updateTransform\n */\nControl.prototype.updateTransform = function() {\n    if(this.redraw) {\n        this.redraw();\n    }\n\n    PIXI.Container.prototype.updateTransform.call(this);\n};\n\n/**\n * get local mouse position from PIXI.InteractionData\n *\n * @method mousePos\n * @returns {PIXI.Point}\n */\nControl.prototype.mousePos = function(e) {\n    return e.data.getLocalPosition(this);\n};\n\n/**\n * update before draw call\n * redraw control for current state from theme\n *\n * @method redraw\n */\nControl.prototype.redraw = function() {\n};\n\n/**\n * Enables/Disables the control.\n * (not implemented yet)\n *\n * @property enabled\n * @type Boolean\n */\nObject.defineProperty(Control.prototype, 'enabled', {\n    get: function() {\n        return this._enabled;\n    },\n    set: function(value) {\n        this._enabled = value;\n    }\n});\n\n\n//var originalWidth = Object.getOwnPropertyDescriptor(PIXI.DisplayObjectContainer.prototype, 'width');\n\n/**\n * The width of the shape, setting this will redraw the component.\n * (set redraw)\n *\n * @property width\n * @type Number\n */\nObject.defineProperty(Control.prototype, 'width', {\n    get: function() {\n        return this._width;\n        //return originalWidth.get.call(this);\n    },\n    set: function(width) {\n        this._width = width;\n        //originalWidth.set.call(this, width);\n    }\n});\n\n//var originalHeight = Object.getOwnPropertyDescriptor(PIXI.DisplayObjectContainer.prototype, 'height');\n\n/**\n * The height of the shape, setting this will redraw the component.\n * (set redraw)\n *\n * @property height\n * @type Number\n */\nObject.defineProperty(Control.prototype, 'height', {\n    get: function() {\n        //return originalHeight.get.call(this);\n        return this._height;\n    },\n    set: function(height) {\n        //originalHeight.set.call(this, height);\n        this._height = height;\n    }\n});\n","var Control = require('./Control');\nvar resizeScaling = require('../utils/resizeScaling');\nvar mixin = require('../utils/mixin');\n\n/**\n * Control that requires a theme (e.g. a button)\n *\n * @class Skinable\n * @extends GOWN.Control\n * @memberof GOWN\n * @constructor\n */\nfunction Skinable(theme) {\n    Control.call(this);\n    this.skinCache = {};\n    this.setTheme(theme || GOWN.theme);\n\n    if (this.theme === undefined) {\n        throw new Error('you need to define a theme first');\n    }\n\n    // invalidate state so the control will be redrawn next time\n    this.invalidState = true; // draw for the first time\n\n    this.initResizeScaling();\n}\n\nSkinable.prototype = Object.create( Control.prototype );\nSkinable.prototype.constructor = Skinable;\nmodule.exports = Skinable;\n\nSkinable.prototype.controlSetTheme = Control.prototype.setTheme;\n/**\n * change the theme\n *\n * @method setTheme\n * @param theme the new theme {Theme}\n */\nSkinable.prototype.setTheme = function(theme) {\n    if (theme === this.theme && theme) {\n        return;\n    }\n\n    this.controlSetTheme(theme);\n    this.preloadSkins();\n    // force states to redraw\n    this.invalidState = true;\n};\n\n/**\n * remove old skin and add new one\n *\n * @method changeSkin\n * @param skin {DisplayObject}\n */\nSkinable.prototype.changeSkin = function(skin) {\n    if (this._currentSkin !== skin) {\n        this._lastSkin = this._currentSkin;\n        this.addChildAt(skin, 0);\n        skin.alpha = 1.0;\n        this._currentSkin = skin;\n\n    }\n    this.invalidState = false;\n};\n\n/**\n * initiate all skins first\n *\n * @method preloadSkins\n */\nSkinable.prototype.preloadSkins = function() {\n};\n\n/**\n * get image from skin (will execute a callback with the loaded skin\n * when it is loaded or call it directly when it already is loaded)\n *\n * @method fromSkin\n * @param name name of the state\n * @param callback callback that is executed if the skin is loaded\n */\nSkinable.prototype.fromSkin = function(name, callback) {\n    var skin;\n    if (this.skinCache[name]) {\n        skin = this.skinCache[name];\n    } else {\n        skin = this.theme.getSkin(this.skinName, name);\n        this.skinCache[name] = skin;\n    }\n    if (skin) {\n        callback.call(this, skin);\n    }\n    // TODO: what, if the skin is not loaded jet? --> execute callback after load\n};\n\n\nmixin(Skinable.prototype, resizeScaling);\n\n/**\n * change the skin name\n * You normally set the skin name as constant in your control, but if you\n * want you can set another skin name to change skins for single components\n * at runtime.\n *\n * @property skinName\n * @type String\n */\nObject.defineProperty(Skinable.prototype, 'skinName', {\n    get: function() {\n        return this._skinName;\n    },\n    set: function(value) {\n        if ( this._skinName === value ) {\n            return;\n        }\n        this._skinName = value;\n        this.invalidState = true;\n    }\n});\n","var Control = require('../Control');\n\n/**\n * entry point for your application, makes some assumptions, (e.g. that you\n * always want fullscreen) and shortcuts some fancy stuff like a gradient\n * background.\n *\n * @class Application\n * @extends GOWN.Control\n * @memberof GOWN\n * @constructor\n * @param background {Number | Array} a background color or a list of colors\n *  that will be used as vertical gradient\n * @param fullscreen {Boolean}\n * @param renderer {WebGLRenderer|CanvasRenderer}\n * @param stage {Stage}\n */\nfunction Application(background, fullscreen, renderer, stage) {\n    if (!stage || !renderer) {\n        stage = new PIXI.Container();\n        var width = 800;\n        var height = 600;\n        if (fullscreen) {\n            width = window.innerWidth;\n            height = window.innerHeight;\n        }\n        renderer = PIXI.autoDetectRenderer(\n            width, height, {backgroundColor : 0xffffff});\n        document.body.appendChild(renderer.view);\n    }\n    /* jshint ignore:start */\n    this._stage = stage;\n    this._renderer = renderer;\n    /* jshint ignore:end */\n    this._width = renderer.width;\n    this._height = renderer.height;\n\n    Control.call(this);\n    stage.addChild(this);\n    this.animate();\n\n    this.background = background;\n    this.fullscreen = fullscreen || false;\n}\n\nApplication.prototype = Object.create( Control.prototype );\nApplication.prototype.constructor = Application;\nmodule.exports = Application;\n\n/**\n * call requestAnimationFrame to render the application at max. FPS\n *\n * @method animate\n */\n/* jshint ignore:start */\nApplication.prototype.animate = function() {\n    var renderer = this._renderer;\n    var stage = this._stage;\n    var animate = function() {\n        renderer.render(stage);\n        requestAnimationFrame(animate);\n    };\n    requestAnimationFrame(animate);\n};\n/* jshint ignore:end */\n\n/**\n * creates a gradient rect that can be used as background\n * (uses a separate canvas to create a new Texture)\n *\n * @method _createGradientRect\n * @private\n */\nApplication.prototype._createGradientRect = function(gradient, width, height) {\n    var bgCanvas = document.createElement('canvas');\n    bgCanvas.width = width || 256;\n    bgCanvas.height = height || 256;\n    var ctx = bgCanvas.getContext('2d');\n    var linearGradient = ctx.createLinearGradient(0, 0, 0, bgCanvas.height);\n    for (var i = 0; i < gradient.length; i++) {\n        linearGradient.addColorStop(i, gradient[i]);\n    }\n    ctx.fillStyle = linearGradient;\n    ctx.fillRect(0, 0, bgCanvas.width, bgCanvas.height);\n    return PIXI.Texture.fromCanvas(bgCanvas);\n};\n\n/**\n * clean application: remove event listener, free memory\n * (can also remove the canvas from the DOM tree if wanted)\n *\n * @method cleanup\n * @param removeCanvas destroys the canvas and remove it from the dom tree\n */\nApplication.prototype.cleanup = function(removeCanvas) {\n    removeCanvas = removeCanvas || true;\n    if (removeCanvas) {\n        document.body.removeChild(this._renderer.view);\n    }\n    this._stage = null;\n    this._renderer = null;\n    this._removeBackground();\n    this.fullscreen = false; // remove event listener\n};\n\n/**\n * called when the browser window / the application is resized\n *\n * @method onresize\n */\nApplication.prototype.onresize = function() {\n    this._width = window.innerWidth;\n    this._height = window.innerHeight;\n    this._renderer.resize(this._width, this._height);\n    if (this.bg) {\n        this.bg.width = this._width;\n        this.bg.height = this._height;\n    }\n    for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (child.onresize) {\n            child.onresize(this._width, this._height);\n        }\n    }\n};\n\n/**\n * remove background\n * @method _removeBackground\n * @private\n */\nApplication.prototype._removeBackground = function() {\n    if (this.bg) {\n        this.removeChild(this.bg);\n        this.bg = null;\n    }\n};\n\n/**\n * set fullscreen and resize to screen size\n *\n * @property enabled\n * @type Boolean\n */\nObject.defineProperty(Application.prototype, 'fullscreen', {\n    get: function() {\n        return this._fullscreen;\n    },\n    set: function(value) {\n        if (this._fullscreen && !value) {\n            window.removeEventListener('resize', this._onresize);\n            if (window.document.body.style.overflow) {\n              window.document.body.style.overflow = 'auto';\n            }\n        } else if (!this._fullscreen && value) {\n            this._onresize = this.onresize.bind(this);\n            window.addEventListener('resize', this._onresize);\n            if (window.document.body.style.overflow) {\n              window.document.body.style.overflow = 'hidden';\n            }\n        }\n        this._fullscreen = value;\n    }\n});\n\n/**\n * set and draw background\n *\n * @property enabled\n * @type Boolean\n */\nObject.defineProperty(Application.prototype, 'background', {\n    get: function() {\n        return this._background;\n    },\n    set: function(value) {\n        if (value === this._background) {\n            return;\n        }\n        this._removeBackground();\n        if (value instanceof Array) {\n            this.bg = new PIXI.Sprite(this._createGradientRect(value));\n            this.bg.width = this._width;\n            this.bg.height = this._height;\n            this.addChildAt(this.bg, 0);\n        } else {\n            this._renderer.backgroundColor = value;\n        }\n        this._background = value;\n    }\n});\n","var Skinable = require('../Skinable');\n\n/**\n * The basic Button with 3 states (up, down and hover) and a label that is\n * centered on it\n *\n * @class Button\n * @extends GOWN.Skinable\n * @memberof GOWN\n * @constructor\n */\nfunction Button(theme) {\n    this.skinName = this.skinName || Button.SKIN_NAME;\n    this._validStates = this._validStates || Button.stateNames;\n    Skinable.call(this, theme);\n    this.handleEvent('up');\n\n    this.updateLabel = false; // label text changed\n\n    this.touchstart = this.mousedown;\n    this.touchend = this.mouseupoutside = this.mouseup;\n    this.touchendoutside = this.mouseout;\n}\n\nButton.prototype = Object.create( Skinable.prototype );\nButton.prototype.constructor = Button;\nmodule.exports = Button;\n\n// name of skin that will be applied\nButton.SKIN_NAME = 'button';\n\n// Identifier for the different button states\n/**\n * Up state: mouse button is released or finger is removed from the screen\n *\n * @property UP\n * @static\n * @final\n * @type String\n */\nButton.UP = 'up';\n\n/**\n * Down state: mouse button is pressed or finger touches the screen\n *\n * @property DOWN\n * @static\n * @final\n * @type String\n */\nButton.DOWN = 'down';\n\n/**\n * Hover state: mouse pointer hovers over the button\n * (ignored on mobile)\n *\n * @property HOVER\n * @static\n * @final\n * @type String\n */\nButton.HOVER = 'hover';\n\n/**\n * names of possible states for a button\n *\n * @property stateNames\n * @static\n * @final\n * @type String\n */\nButton.stateNames = [\n    Button.DOWN, Button.HOVER, Button.UP\n];\n\n/**\n * initiate all skins first\n * (to prevent flickering)\n *\n * @method preloadSkins\n */\nButton.prototype.preloadSkins = function() {\n    for (var i = 0; i < this._validStates.length; i++) {\n        var name = this._validStates[i];\n        var skin = this.theme.getSkin(this.skinName, name);\n        this.skinCache[name] = skin;\n        if (skin) {\n            this.addChildAt(skin, 0);\n            skin.alpha = 0.0;\n            if (this.width) {\n                skin.width = this.width;\n            }\n            if (this.height) {\n                skin.height = this.height;\n            }\n        }\n    }\n};\n\nButton.prototype.mousedown = function() {\n    this.handleEvent(Button.DOWN);\n};\n\nButton.prototype.mouseup = function() {\n    this.handleEvent(Button.UP);\n};\n\nButton.prototype.mousemove = function() {\n};\n\nButton.prototype.mouseover = function() {\n    this.handleEvent(Button.HOVER);\n};\n\nButton.prototype.mouseout = function() {\n    this.handleEvent('out');\n};\n\n\n/**\n * update width/height of the button\n *\n * @method updateDimensions\n */\nButton.prototype.updateDimensions = function() {\n    var width = this.worldWidth;\n    var height = this.worldHeight;\n    if (this.hitArea) {\n        this.hitArea.width = width;\n        this.hitArea.height = height;\n    } else {\n        this.hitArea = new PIXI.Rectangle(0, 0, width, height);\n    }\n    for (var i = 0; i < this._validStates.length; i++) {\n        var name = this._validStates[i];\n        var skin = this.skinCache[name];\n        if (skin) {\n            skin.width = width;\n            skin.height = height;\n        }\n    }\n\n    if(this.labelText) {\n        var scaleY = height / this._height;\n        this.labelText.style.fontSize = this.theme.textStyle.fontSize * scaleY;\n        this.labelText.style = this.labelText.style; // trigger setter\n        this.updateLabelDimensions();\n    }\n};\n\n/**\n * handle one of the mouse/touch events\n *\n * @method handleEvent\n * @param type one of the valid states\n */\nButton.prototype.handleEvent = function(type) {\n    if (!this._enabled) {\n        return;\n    }\n    if (type === Button.DOWN) {\n        this.currentState = Button.DOWN;\n        this._pressed = true;\n    } else if (type === Button.UP) {\n        this._pressed = false;\n        if (this._over && this.theme.hoverSkin) {\n            this.currentState = Button.HOVER;\n        } else {\n            this.currentState = Button.UP;\n        }\n    } else if (type === Button.HOVER) {\n        this._over = true;\n        if (this._pressed) {\n            this.currentState = Button.DOWN;\n        } else if (this.theme.hoverSkin) {\n            this.currentState = Button.HOVER;\n        }\n    } else  { // type === rollout and default\n        if (this._over) {\n            this._over = false;\n        }\n        this.currentState = Button.UP;\n    }\n};\n\n// performance increase to avoid using call.. (10x faster)\nButton.prototype.redrawSkinable = Skinable.prototype.redraw;\n\n/**\n * update before draw call (position label)\n *\n * @method redraw\n */\nButton.prototype.redraw = function() {\n    if (this.updateLabel) {\n        this.createLabel();\n    }\n    this.redrawSkinable();\n};\n\n/**\n * create/update a label for this button\n *\n * @method createLabel\n */\nButton.prototype.createLabel = function() {\n    if(this.labelText) {\n        this.labelText.text = this._label;\n        this.labelText.style = this.theme.textStyle.clone();\n    } else {\n        this.labelText = new PIXI.Text(this._label, this.theme.textStyle.clone());\n        this.addChild(this.labelText);\n    }\n    this.updateLabelDimensions();\n    this.updateLabel = false;\n};\n\n/**\n * create/update the position of the label\n *\n * @method updateLabelDimensions\n */\nButton.prototype.updateLabelDimensions = function () {\n    if (this.labelText && this.labelText.text) {\n        this.labelText.x = Math.floor((this.worldWidth - this.labelText.width) / 2);\n        this.labelText.y = Math.floor((this.worldHeight - this.labelText.height) / 2);\n    }\n};\n\nButton.prototype.skinableSetTheme = Skinable.prototype.setTheme;\n\n/**\n * change the theme\n *\n * @method setTheme\n * @param theme the new theme {Theme}\n */\nButton.prototype.setTheme = function(theme) {\n    // this theme has other font or color settings - update the label\n    if (this.labelText) {\n        this.updateLabel = (this.updateLabel ||\n            this.labelText.font !== this.theme.labelFont ||\n            this.labelText.color !== this.theme.labelColor );\n    }\n    this.skinableSetTheme(theme);\n};\n\n\n/**\n * The current state (one of _validStates)\n *\n * @property currentState\n * @type String\n */\nObject.defineProperty(Button.prototype, 'currentState',{\n    get: function() {\n        return this._currentState;\n    },\n    set: function(value) {\n        if (this._currentState === value) {\n            return;\n        }\n        if (this._validStates.indexOf(value) < 0) {\n            throw new Error('Invalid state: ' + value + '.');\n        }\n        this._currentState = value;\n        // invalidate state so the next draw call will redraw the control\n        this.invalidState = true;\n    }\n});\n\n/**\n * Create/Update the label of the button.\n *\n * @property label\n * @type String\n */\nObject.defineProperty(Button.prototype, 'label', {\n    get: function() {\n        return this._label;\n    },\n    set: function(label) {\n        if(this._label === label) {\n            return;\n        }\n        this._label = label;\n        this.updateLabel = true;\n    }\n});\n","var Skinable = require('../Skinable');\n\n/**\n * The basic CheckBox with 3 normal states (up, down and hover)\n * and 3 selected states (selected_up, selected_down and selected_hover)\n *\n * @class CheckBox\n * @extends GOWN.Skinable\n * @memberof GOWN\n * @constructor\n */\nfunction CheckBox(preselected, theme) {\n    this.skinName = this.skinName || CheckBox.SKIN_NAME;\n    this._validStates = this._validStates || CheckBox.stateNames.concat(CheckBox.selectedStateNames);\n    Skinable.call(this, theme);\n\n    this._currentState = 'up';\n    this.selected = preselected || false;\n    this._mousedown = false;\n\n    this.touchstart = this.mousedown;\n    this.touchend = this.mouseupoutside = this.mouseup;\n    this.touchendoutside = this.mouseout;\n}\n\nCheckBox.prototype = Object.create( Skinable.prototype );\nCheckBox.prototype.constructor = CheckBox;\nmodule.exports = CheckBox;\n\n// name of skin that will be applied\nCheckBox.SKIN_NAME = 'checkbox';\n\n// the states of the checkbox as constants\nCheckBox.UP = 'up';\nCheckBox.DOWN = 'down';\nCheckBox.HOVER = 'hover';\n\n// the states of the checkbox in the 'selected' state as constants\nCheckBox.SELECTED_UP = 'selected_up';\nCheckBox.SELECTED_DOWN = 'selected_down';\nCheckBox.SELECTED_HOVER = 'selected_hover';\n\n// the list of non-selected states\nCheckBox.stateNames = [\n    CheckBox.UP,\n    CheckBox.DOWN,\n    CheckBox.HOVER\n];\n\n// the list of selected states\nCheckBox.selectedStateNames = [\n    CheckBox.SELECTED_UP,\n    CheckBox.SELECTED_DOWN,\n    CheckBox.SELECTED_HOVER\n];\n\nCheckBox.prototype.mousedown = function() {\n    this.handleEvent(CheckBox.DOWN);\n};\n\nCheckBox.prototype.mouseup = function() {\n    this.handleEvent(CheckBox.UP);\n};\n\nCheckBox.prototype.mousemove = function() {\n};\n\nCheckBox.prototype.mouseover = function() {\n    this.handleEvent(CheckBox.HOVER);\n};\n\nCheckBox.prototype.mouseout = function() {\n    this.handleEvent('out');\n};\n\n/**\n * initiate all skins first\n * (to prevent flickering)\n *\n * @method preloadSkins\n */\nCheckBox.prototype.preloadSkins = function() {\n    for (var i = 0; i < this._validStates.length; i++) {\n        var name = this._validStates[i];\n        var skin = this.theme.getSkin(this.skinName, name);\n        this.skinCache[name] = skin;\n        if (skin) {\n            this.addChildAt(skin, 0);\n            skin.alpha = 0.0;\n            if (this.width) {\n                skin.width = this.width;\n            }\n            if (this.height) {\n                skin.height = this.height;\n            }\n        }\n    }\n};\n\n/**\n * The current state (one of _validStates)\n *\n * @property currentState\n * @type String\n */\nObject.defineProperty(CheckBox.prototype, 'currentState',{\n    get: function() {\n        return this._currentState;\n    },\n    set: function(value) {\n        if (this._currentState === value) {\n            return;\n        }\n        if (this._validStates.indexOf(value) < 0) {\n            throw new Error('Invalid state: ' + value + '.');\n        }\n        this._currentState = value;\n        this.invalidState = true;\n    }\n});\n\n/**\n * Indicate if the checkbox is selected (checked)\n *\n * @property selected\n * @type Boolean\n */\nObject.defineProperty(CheckBox.prototype, 'selected', {\n    set: function(selected) {\n        var state = this._currentState;\n        var index;\n        if ((CheckBox.selectedStateNames.indexOf(state) >= 0) && !selected) {\n            index = CheckBox.selectedStateNames.indexOf(state);\n            state = CheckBox.stateNames[index];\n        } else if ((CheckBox.stateNames.indexOf(state) >= 0) && selected) {\n            index = CheckBox.stateNames.indexOf(state);\n            state = CheckBox.selectedStateNames[index];\n        }\n\n        this._selected = selected;\n        this._pressed = false; //to prevent toggling on touch/mouse up\n        this.currentState = state;\n    },\n    get: function() {\n        return this._selected;\n    }\n});\n\nCheckBox.prototype.toggleSelected = function () {\n    this.selected = !this.selected;\n    if (this.change) {\n        this.change(this.selected);\n    }\n};\n\nCheckBox.prototype.handleEvent = function (type) {\n    switch (type) {\n        case CheckBox.UP:\n            if (this._mousedown) {\n                this._mousedown = false;\n                this.toggleSelected();\n                this.currentState = this.selected ? CheckBox.SELECTED_UP : CheckBox.UP;\n            }\n            break;\n        case CheckBox.DOWN:\n            if (!this._mousedown) {\n                this._mousedown = true;\n                this.currentState = this.selected ? CheckBox.SELECTED_DOWN : CheckBox.DOWN;\n            }\n            break;\n        case CheckBox.HOVER:\n            if (!this._mousedown) {\n                this.currentState = this.selected ? CheckBox.SELECTED_HOVER : CheckBox.HOVER;\n            }\n            break;\n        case 'out':\n            this.currentState = this.selected ? CheckBox.SELECTED_UP : CheckBox.UP;\n            break;\n        default:\n            break;\n    }\n};\n","var Skinable = require('../Skinable'),\n    InputWrapper = require('../../utils/InputWrapper');\n\n/**\n * InputControl used for TextInput, TextArea and everything else that\n * is capable of entering text\n *\n * based on PIXI.Input InputObject by Sebastian Nette,\n * see https://github.com/SebastianNette/PIXI.Input\n *\n * @class InputControl\n * @extends GOWN.Skinable\n * @memberof GOWN\n * @constructor\n */\nfunction InputControl(text, theme) {\n    Skinable.call(this, theme);\n    this.text = text || '';\n    // create DOM Input (if we need one)\n    InputWrapper.createInput();\n    this.hasFocus = false;\n\n    /**\n     * indicates if the mouse button has been pressed\n     * @property _mouseDown\n     * @type {boolean}\n     * @private\n     */\n    this._mouseDown = false;\n\n    /**\n     * TODO: description!\n     *\n     * @type {Array}\n     * @private\n     */\n    this._clipPos = [0, 0];\n}\n\nInputControl.prototype = Object.create( Skinable.prototype );\nInputControl.prototype.constructor = InputControl;\nmodule.exports = InputControl;\n\n/**\n * currently selected input control (used for tab index)\n *\n * @property currentInput\n * @type GOWN.InputControl\n * @static\n */\nInputControl.currentInput = null;\n\nInputControl.prototype.onKeyUp = function() {\n};\n\nInputControl.prototype.onKeyDown = function() {\n};\n\n/**\n * determine where the click was made along the string\n *\n * @method clickPos\n * @param x\n * @returns {Number}\n */\nInputControl.prototype.clickPos = function(x)\n{\n\n    var text = this.pixiText.text,\n        totalWidth = this.pixiText.x,\n        pos = text.length;\n\n    if (x < this.textWidth(text) + totalWidth)\n    {\n        // loop through each character to identify the position\n        for (var i=0; i<text.length; i++)\n        {\n            totalWidth += this.textWidth(text[i]);\n            if (totalWidth >= x)\n            {\n                pos = i;\n                break;\n            }\n        }\n    }\n\n    return this._clipPos[0] + pos;\n};\n\nInputControl.prototype.posToCoord = function(pos) {\n    var text = this.pixiText.text,\n        totalWidth = this.pixiText.x;\n\n    if (pos < text.length) {\n        return totalWidth + this.textWidth(text.substring(0, pos));\n    } else {\n        return totalWidth + this.textWidth(text);\n    }\n};\n\n/**\n * get text width\n *\n * @method textWidth\n * @param text\n * @returns {*}\n */\nInputControl.prototype.textWidth = function(text) {\n    if(!this.text._isBitmapFont)\n    {\n        var ctx = this.pixiText.context;\n        return ctx.measureText(text || '').width;\n    }\n    else\n    {\n        var prevCharCode = null;\n        var width = 0;\n        var data = this.pixiText._data;\n        for(var i = 0; i < text.length; i++) {\n            var charCode = text.charCodeAt(i);\n            var charData = data.chars[charCode];\n            if(!charData) {\n                continue;\n            }\n            if(prevCharCode && charData.kerning[prevCharCode]) {\n                width += charData.kerning[prevCharCode];\n            }\n            width += charData.xAdvance;\n            prevCharCode = charCode;\n        }\n        return width * this.pixiText._scale;\n    }\n};\n\n/**\n * focus on this input and set it as current\n *\n * @method focus\n */\nInputControl.prototype.focus = function () {\n    // is already current input\n    if (GOWN.InputControl.currentInput === this) {\n        return;\n    }\n\n    // drop focus\n    if (GOWN.InputControl.currentInput) {\n        GOWN.InputControl.currentInput.blur();\n    }\n\n    // set focus\n    GOWN.InputControl.currentInput = this;\n    this.hasFocus = true;\n\n    // check custom focus event\n    this.onfocus();\n\n    /*\n     //TODO\n     // is read only\n     if(this.readonly) {\n        return;\n     }\n     */\n\n    // focus hidden input\n    InputWrapper.focus();\n};\n\n/**\n * determine if the input has the focus\n *\n * @property hasFocus\n * @type Boolean\n */\nObject.defineProperty(InputControl.prototype, 'hasFocus', {\n    get: function() {\n        return this._hasFocus;\n    },\n    set: function(focus) {\n        this._hasFocus = focus;\n    }\n});\n\nInputControl.prototype.onMouseUpOutside = function() {\n    if(this.hasFocus && !this._mouseDown)\n    {\n        this.blur();\n    }\n    this._mouseDown = false;\n};\n\n/**\n * callback to execute code on focus\n * @method onFocus\n */\nInputControl.prototype.onfocus = function () {\n};\n\n/**\n * blur the text input (remove focus)\n *\n * @method blur\n */\nInputControl.prototype.blur = function() {\n    if (GOWN.InputControl.currentInput === this) {\n        GOWN.InputControl.currentInput = null;\n        this.hasFocus = false;\n\n        // blur hidden input\n        InputWrapper.blur();\n        this.onblur();\n    }\n};\n\n/**\n * callback that will be executed once the text input is blurred\n *\n * @method onblur\n */\nInputControl.prototype.onblur = function() {\n};\n\n// blur current input\nInputControl.blur = function() {\n    if (GOWN.InputControl.currentInput &&\n        !GOWN.InputControl.currentInput._mouseDown) {\n        GOWN.InputControl.currentInput.blur();\n        GOWN.InputControl.currentInput = null;\n    }\n};\nwindow.addEventListener('blur', InputControl.blur, false);\n","var Control = require('../Control'),\n    ViewPortBounds = require('../layout/ViewPortBounds');\n\n/**\n * The LayoutGroup allows you to add PIXI.js children that will be positioned\n *\n * @class LayoutGroup\n * @extends GOWN.Layout\n * @memberof GOWN\n * @constructor\n */\nfunction LayoutGroup() {\n    this.percentWidth = this.percentWidth || null;\n    this.percentHeight = this.percentHeight || null;\n    Control.call(this);\n    this._viewPortBounds = new ViewPortBounds();\n    this._needUpdate = true;\n}\n\nLayoutGroup.prototype = Object.create( Control.prototype );\nLayoutGroup.prototype.constructor = LayoutGroup;\nmodule.exports = LayoutGroup;\n\n/**\n * update before draw call (position label)\n *\n * @method redraw\n */\nLayoutGroup.prototype.redraw = function() {\n    var dimensionChanged = false;\n    if (this._width && this._viewPortBounds.explicitWidth !== this._width) {\n        // width set - change viewport boundaries\n        this._viewPortBounds.explicitWidth = this._width;\n        dimensionChanged = true;\n    }\n    if (this._height && this._viewPortBounds.explicitHeight !== this._height) {\n        // height set - change viewport boundaries\n        this._viewPortBounds.explicitHeight = this._height;\n        dimensionChanged = true;\n    }\n    if (this.layout &&\n        (this._needUpdate || dimensionChanged || this.layout.needUpdate)) {\n        this.layout.layout(this.children, this._viewPortBounds);\n        this._needUpdate = false;\n        this.layout._needUpdate = false;\n    }\n};\n\n/* istanbul ignore next */\nLayoutGroup.prototype.addChild = function(child) {\n    var re = Control.prototype.addChild.call(this, child);\n    this._needUpdate = true;\n    return re;\n};\n\n/* istanbul ignore next */\nLayoutGroup.prototype.addChildAt = function(child, pos) {\n    var re = Control.prototype.addChildAt.call(this, child, pos);\n    this._needUpdate = true;\n    return re;\n};\n\n/**\n * add some space between children\n *\n * @param space {Number}\n */\nLayoutGroup.prototype.addSpacer = function(space) {\n    var spacer = new Control();\n    spacer.width = spacer.height = space;\n    this.addChild(spacer);\n};\n\n/**\n * Indicates if the given child is inside the viewport (only used for scrolling)\n *\n * @method childIsRenderAble\n * @type boolean\n * @param child one child with set coordinates and dimensions\n * @param x X-position on the scroll-container\n * @param y Y-position on the scroll-container\n * @param width width of the viewport\n * @param height height of the viewport\n */\nLayoutGroup.prototype.childIsRenderAble = function(child, x, y, width, height) {\n    return child.x < width + x &&\n        child.y < height + y &&\n        child.x > x - child.width &&\n        child.y > y - child.height;\n};\n\n\n/**\n * Update renderable (culling of non visible objects)\n *\n * @method updateRenderable\n * @param x X-position on the scroll-container\n * @param y Y-position on the scroll-container\n * @param width width of the viewport\n * @param height height of the viewport\n */\nLayoutGroup.prototype.updateRenderable = function(x, y, width, height) {\n    for(var i=0, j=this.children.length; i<j; i++) {\n        var child = this.children[i];\n        child.renderable = this.childIsRenderAble(child, x, y, width, height);\n    }\n};\n\n\n/**\n * The width of the group, will get the position and the width of the right child.\n *\n * @property width\n * @type Number\n */\nObject.defineProperty(LayoutGroup.prototype, 'width', {\n    set: function(width) {\n        this._width = width;\n    },\n    get: function() {\n        if (this._width > 0) {\n            return this._width;\n        }\n        var width = 0;\n        if (this.children) {\n            for (var i = 0; i < this.children.length; i++) {\n                var child = this.getChildAt(i);\n                width = Math.max(width, child.x+child.width);\n            }\n        }\n        return width;\n    }\n});\n\n/**\n * The height of the group, will get the position and the height of the bottom child.\n *\n * @property width\n * @type Number\n */\nObject.defineProperty(LayoutGroup.prototype, 'height', {\n    set: function(height) {\n        this._height = height;\n    },\n    get: function() {\n        if (this._height > 0) {\n            return this._height;\n        }\n        var height = 0;\n        if (this.children) {\n            for (var i = 0; i < this.children.length; i++) {\n                var child = this.getChildAt(i);\n                height = Math.max(height, child.y+child.height);\n            }\n        }\n        return height;\n    }\n});\n","var Control = require('../Control'),\n    LayoutAlignment = require('../layout/LayoutAlignment');\n\n/**\n * The ScrollArea hosts some content that can be scrolled. The width/height\n * of the ScrollArea defines the viewport.\n *\n * @class ScrollArea\n * @extends GOWN.Control\n * @memberof GOWN\n * @constructor\n */\nfunction ScrollArea(content, addListener, scrolldelta, bar) {\n    this.addListener = addListener || true;\n    this.bar = bar || null;\n    Control.call(this);\n    this.content = content || null;\n    this.mask = undefined;\n    this.enabled = true;\n    this._useMask = true;\n\n    this.scrolldirection = ScrollArea.SCROLL_AUTO;\n    // # of pixel you scroll at a time (if the event delta is 1 / -1)\n    this.scrolldelta = scrolldelta || 10;\n\n    this.interactive = true;\n\n    this.touchend = this.touchendoutside = this.mouseupoutside = this.mouseup;\n    this.touchstart = this.mousedown;\n    this.touchmove = this.mousemove;\n}\n\nScrollArea.prototype = Object.create( Control.prototype );\nScrollArea.prototype.constructor = ScrollArea;\nmodule.exports = ScrollArea;\n\n// scrolls horizontal as default, but will change if a\n// horizontal layout is set in the content\nScrollArea.SCROLL_AUTO = 'auto';\nScrollArea.SCROLL_VERTICAL = 'vertical';\nScrollArea.SCROLL_HORIZONTAL = 'horizontal';\n\n/**\n * check, if the layout of the content is horizontally alligned\n *\n * * @method layoutHorizontalAlign\n */\nScrollArea.prototype.layoutHorizontalAlign = function() {\n    return this.content.layout &&\n        this.content.layout.alignment === LayoutAlignment.HORIZONTAL_ALIGNMENT;\n};\n\n/**\n * test if content width bigger than this width but content height is\n * smaller than this height (so we allow scrolling in only one direction)\n *\n * @method upright\n */\nScrollArea.prototype.upright = function() {\n    return this.content.height <= this.height &&\n        this.content.width > this.width;\n};\n\n/**\n * get 1-dimensional scroll direction\n * dissolve \"auto\" into VERTICAL or HORIZONTAL\n *\n * @method direction\n * @returns {String}\n */\nScrollArea.prototype.direction = function() {\n    var scrollAuto = this.scrolldirection === ScrollArea.SCROLL_AUTO;\n    var scroll = ScrollArea.SCROLL_VERTICAL;\n    // if the scroll direction is set to SCROLL_AUTO we check, if the\n    // layout of the content is set to horizontal or the content\n    // width is bigger than the current\n    if (this.scrolldirection === ScrollArea.SCROLL_HORIZONTAL ||\n        (scrollAuto && (this.layoutHorizontalAlign() || this.upright()) )) {\n        scroll = ScrollArea.SCROLL_HORIZONTAL;\n    }\n    return scroll;\n};\n\n/**\n * move content\n *\n * @method _scrollContent\n */\nScrollArea.prototype._scrollContent = function(x, y) {\n    // todo: press shift to switch direction\n    var scroll = this.direction();\n    var contentMoved = false;\n    if (scroll === ScrollArea.SCROLL_HORIZONTAL) {\n        if (this.content.width > this.width) {\n            // assure we are within bounds\n            x = Math.min(x, 0);\n            if (this.content.width) {\n                x = Math.max(x, -(this.content.width - this.width));\n            }\n            this.content.x = Math.floor(x);\n            contentMoved = true;\n        }\n    }\n    if (scroll === ScrollArea.SCROLL_VERTICAL) {\n        if (this.content.height > this.height) {\n            // assure we are within bounds\n            y = Math.min(y, 0);\n            if (this.content.height && this.content.y < 0) {\n                y = Math.max(y, -(this.content.height - this.height));\n            }\n            this.content.y = Math.floor(y);\n            contentMoved = true;\n        }\n    }\n    return contentMoved;\n};\n\n// update ScrollBar progress/thumb position\nScrollArea.prototype.updateBar = function() {\n    if (this.bar && this.bar.thumb && this.content) {\n        var scroll = this.direction();\n        if (scroll === ScrollArea.SCROLL_HORIZONTAL) {\n            this.bar.thumb.x = Math.floor(-this.content.x /\n                (this.content.width - this.width) *\n                (this.bar.width - this.bar.thumb.width));\n        }\n        if (scroll === ScrollArea.SCROLL_VERTICAL) {\n            this.bar.thumb.y = Math.floor(-this.content.y /\n            (this.content.height - this.height) *\n            (this.bar.height - this.bar.thumb.height));\n        }\n    }\n};\n\n/**\n * mouse button pressed / touch start\n *\n * @method mousedown\n */\nScrollArea.prototype.mousedown = function(mouseData) {\n    var pos = mouseData.data.getLocalPosition(this);\n    if (!this._start) {\n        this._start = [\n            pos.x - this.content.x,\n            pos.y - this.content.y\n        ];\n    }\n};\n\n/**\n * mouse/finger moved\n *\n * @method mousemove\n */\nScrollArea.prototype.mousemove = function(mouseData) {\n    if (this._start) {\n        var pos = mouseData.data.getLocalPosition(this);\n        if (this._scrollContent(\n                pos.x - this._start[0],\n                pos.y - this._start[1])) {\n            this.updateBar();\n        }\n    }\n};\n\n/**\n * mouse up/touch end\n *\n * @method mouseup\n */\nScrollArea.prototype.mouseup = function() {\n    this._start = null;\n};\n\n\n/**\n * do not remove children - we just have a content\n * override addChild to prevent the developer from adding more than one context\n * @param child\n */\n/*\nScrollArea.prototype.removeChild = function(child) {\n    throw new Error('use .content = null instead of removeChild(child)')\n};\n\nScrollArea.prototype.addChild = function(child) {\n    throw new Error('use .content = child instead of addChild(child)')\n};\n*/\n\n/**\n * create a new mask or redraw it\n * @method updateMask\n */\nScrollArea.prototype.updateMask = function() {\n    if (this.height && this.width && this._useMask) {\n        if (this.mask === undefined) {\n            this.mask = new PIXI.Graphics();\n        }\n        this.drawMask();\n    } else {\n        if (this.mask) {\n            this.mask.clear();\n        }\n        this.mask = undefined;\n    }\n};\n\n/**\n * draw mask (can be overwritten, e.g. to show something above the\n * scroll area when using a vertical layout)\n * @private\n * @method drawMask\n */\nScrollArea.prototype.drawMask = function() {\n    var pos = new PIXI.Point(0, 0);\n    var global = this.toGlobal(pos);\n    this.mask.clear()\n        .beginFill('#fff', 1)\n        .drawRect(global.x, global.y, this.width, this.height)\n        .endFill();\n    if (this.hitArea) {\n        this.hitArea.width = this.width;\n        this.hitArea.height = this.height;\n    } else {\n        this.hitArea = new PIXI.Rectangle(0, 0, this.width, this.height);\n    }\n};\n\n\n/**\n * update mask as needed\n *\n * @method redraw\n */\nScrollArea.prototype.redraw = function() {\n    if (this.content.updateRenderable) {\n        this.content.updateRenderable(-this.content.x, -this.content.y, this.width, this.height);\n    }\n\n    if (this.invalid) {\n        this.updateMask();\n        this.invalid = false;\n    }\n};\n\n/**\n * scroll content, that can have the scrollarea as viewport.\n * can be a PIXI.Texture or a ScrollContainer\n *\n * @property content\n */\nObject.defineProperty(ScrollArea.prototype, 'content', {\n    set: function(content) {\n        if (this._content) {\n            this.removeChild(content);\n        }\n        this._content = content;\n        if (content) {\n            this.addChild(content);\n        }\n    },\n    get: function() {\n        return this._content;\n    }\n});\n\n\n/**\n * The width of the ScrollArea (defines the viewport)\n *\n * @property width\n * @type Number\n */\nObject.defineProperty(ScrollArea.prototype, 'width', {\n    get: function() {\n        if (!this._width) {\n            return this._content.width;\n        }\n        return this._width;\n    },\n    set: function(width) {\n        this._width = width;\n        this.invalid = true;\n    }\n});\n\n/**\n * The height of the ScrollArea (defines the viewport)\n *\n * @property height\n * @type Number\n */\nObject.defineProperty(ScrollArea.prototype, 'height', {\n    get: function() {\n        if (!this._height) {\n            return this._content.height;\n        }\n        return this._height;\n    },\n    set: function(height) {\n        this._height = height;\n        this.invalid = true;\n    }\n});\n","var Scrollable = require('./Scrollable'),\n    LayoutAlignment = require('../layout/LayoutAlignment');\n\n/**\n * scoll bar with thumb\n * hosting some Viewport (e.g. a ScrollArea or a Texture)\n *\n * @class ScrollArea\n * @extends GOWN.Scrollable\n * @memberof GOWN\n * @constructor\n */\nfunction ScrollBar(scrollArea, thumb, theme) {\n    this.scrollArea = scrollArea;\n    this.skinName = this.skinName || ScrollBar.SKIN_NAME;\n\n    if (this.orientation === undefined) {\n        this.orientation = Scrollable.HORIZONTAL;\n        if (scrollArea && scrollArea.content &&\n            scrollArea.content.layout.alignment ===\n                LayoutAlignment.VERTICAL_ALIGNMENT) {\n            this.orientation = Scrollable.VERTICAL;\n        }\n    }\n    if (scrollArea) {\n        //scrollArea\n        // move thumb when scrollarea moves\n        scrollArea.bar = this;\n    }\n    Scrollable.call(this, thumb, theme);\n}\n\nScrollBar.prototype = Object.create( Scrollable.prototype );\nScrollBar.prototype.constructor = ScrollBar;\nmodule.exports = ScrollBar;\n\n\nScrollBar.SKIN_NAME = 'scroll_bar';\n\nScrollBar.prototype.scrollableredraw = Scrollable.prototype.redraw;\n/**\n * recalculate scroll thumb width/height\n * @method redraw\n */\nScrollBar.prototype.redraw = function() {\n    if (this.invalidTrack) {\n        if (this.scrollArea && this.thumb) {\n            if (this.orientation === Scrollable.HORIZONTAL) {\n                this.thumb.width = Math.max(20, this.scrollArea.width /\n                    (this.scrollArea.content.width / this.scrollArea.width));\n            } else {\n                this.thumb.height = Math.max(20, this.scrollArea.height /\n                    (this.scrollArea.content.height / this.scrollArea.height));\n            }\n        }\n        this.scrollableredraw(this);\n    }\n};\n\n/**\n * thumb has been moved - scroll content to position\n * @param x x-position to scroll to (ignored when vertical)\n * @param y y-position to scroll to (ignored when horizontal)\n * @method thumbMoved\n */\nScrollBar.prototype.thumbMoved = function(x, y) {\n    if (this.scrollArea && this.scrollArea.content) {\n\n        if (this.orientation === Scrollable.HORIZONTAL) {\n            this.scrollArea._scrollContent(\n                -(this.scrollArea.content.width - this.scrollArea.width) *\n                    (x / (this.scrollArea.width - this.thumb.width)),\n                0);\n        } else {\n            this.scrollArea._scrollContent(\n                0,\n                -(this.scrollArea.content.height - this.scrollArea.height) *\n                    (y / (this.scrollArea.height - this.thumb.height)));\n        }\n    }\n};\n","var Button = require('./Button');\n\n/**\n * thumb button that can be moved on the scrollbar\n *\n * @class ScrollThumb\n * @extends GOWN.Button\n * @memberof GOWN\n * @constructor\n */\nfunction ScrollThumb(scrollable, theme) {\n    this.scrollable = scrollable;\n    var defaultSkin = ScrollThumb.SKIN_NAME;\n    if (!theme.thumbSkin) {\n        defaultSkin = Button.SKIN_NAME;\n    }\n    this.skinName = this.skinName || defaultSkin;\n    if (theme.thumbSkin) {\n        this._validStates = ScrollThumb.THUMB_STATES;\n    }\n    this.width = theme.thumbSize || 20;\n    this.height = theme.thumbSize || 20;\n    Button.call(this, theme);\n    this.invalidTrack = true;\n\n    this.touchmove = this.mousemove;\n    /* jshint unused: false */\n    this.touchdown = this.mousedown;\n    /* jshint unused: false */\n    this.touchend = this.touchendoutside = this.mouseup;\n}\n\nScrollThumb.prototype = Object.create( Button.prototype );\nScrollThumb.prototype.constructor = ScrollThumb;\nmodule.exports = ScrollThumb;\n\n\nScrollThumb.SKIN_NAME = 'scroll_thumb';\n\nScrollThumb.THUMB_STATES = [\n    'horizontal_up', 'vertical_up',\n    'horizontal_down', 'vertical_down',\n    'horizontal_hover', 'vertical_hover'\n];\n\nvar originalCurrentState = Object.getOwnPropertyDescriptor(Button.prototype, 'currentState');\n\n/**\n * The current state (one of _validStates)\n *\n * @property currentState\n * @type String\n */\nObject.defineProperty(ScrollThumb.prototype, 'currentState',{\n    set: function(value) {\n        if (this.theme.thumbSkin) {\n            // use skin including orientation instead of default skin\n            value = this.scrollable.orientation + '_' + value;\n        }\n        originalCurrentState.set.call(this, value);\n    }\n});\n\nScrollThumb.prototype.buttonmousedown = Button.prototype.mousedown;\nScrollThumb.prototype.mousedown = function(mouseData) {\n    this.buttonmousedown(mouseData);\n    var local = mouseData.data.getLocalPosition(this.scrollable);\n    this.scrollable._start = [local.x, local.y];\n    //this.scrollable.handleDown(mouseData);\n    mouseData.stopPropagation();\n};\n\nScrollThumb.prototype.buttonmousemove = Button.prototype.mousemove;\nScrollThumb.prototype.mousemove = function (mouseData) {\n    this.buttonmousemove(mouseData);\n    this.scrollable.handleMove(mouseData);\n};\n\nScrollThumb.prototype.buttonmouseup = Button.prototype.mouseup;\nScrollThumb.prototype.mouseup = function (mouseData) {\n    this.buttonmouseup(mouseData);\n    this.scrollable.handleUp();\n};\n\n/**\n * show track icon on thumb\n *\n * @method showTrack\n * @param skin\n */\nScrollThumb.prototype.showTrack = function(skin) {\n    if (this.skin !== skin) {\n        if(this.skin) {\n            this.removeChild(this.skin);\n        }\n\n        this.addChild(skin);\n        this.skin = skin;\n    }\n    skin.x = Math.floor((this.width - skin.getBounds().width )/ 2);\n    skin.y = Math.floor((this.height - skin.getBounds().height )/ 2);\n    this.invalidTrack = false;\n};\n\n/**\n * redraw the skin\n *\n * @method redraw\n */\nScrollThumb.prototype.redraw = function() {\n    this.redrawSkinable();\n    if (this.invalidTrack && this.theme.thumbSkin) {\n        this.fromSkin(this.scrollable.orientation+'_thumb', this.showTrack);\n    }\n};\n\n\n/**\n * move the thumb on the scroll bar within its bounds\n *\n * @param x new calculated x position of the thumb\n * @param y new calculated y position of the thumb\n * @returns {boolean} returns true if the position of the thumb has been\n * moved\n * @method move\n */\nScrollThumb.prototype.move = function(x, y) {\n    if (this.scrollable.orientation === GOWN.Scrollable.HORIZONTAL) {\n        if (isNaN(x)) {\n            return false;\n        }\n        x = Math.min(x, this.scrollable.maxWidth());\n        x = Math.max(x, 0);\n        if (x !== this.x) {\n            this.x = x;\n            return true;\n        }\n    } else {\n        if (isNaN(y)) {\n            return false;\n        }\n        y = Math.min(y, this.scrollable.maxHeight());\n        y = Math.max(y, 0);\n        if (y !== this.y) {\n            this.y = y;\n            return true;\n        }\n    }\n    return false;\n};","var Skinable = require('../Skinable'),\n    ScrollThumb = require('./ScrollThumb');\n/**\n * scroll bar or slider\n * @class Scrollable\n * @extends GOWN.Scrollable\n * @memberof GOWN\n * @constructor\n */\n\nfunction Scrollable(thumb, theme) {\n    this.mode = this.mode || Scrollable.DESKTOP_MODE;\n\n    Skinable.call(this, theme);\n\n    this.orientation = this.orientation || Scrollable.HORIZONTAL;\n\n    this.thumb = thumb || new ScrollThumb(this, this.theme);\n    this.addChild(this.thumb);\n\n    this.invalidTrack = true;\n    this._inverse = false;\n    this._start = null;\n\n    // # of pixel you scroll at a time (if the event delta is 1 / -1)\n    this.scrolldelta = 10;\n\n    this.touchstart = this.mousedown = this.handleDown;\n    this.touchend = this.mouseup = this.mouseupoutside = this.handleUp;\n}\n\nScrollable.prototype = Object.create( Skinable.prototype );\nScrollable.prototype.constructor = Scrollable;\nmodule.exports = Scrollable;\n\n\n/**\n * in desktop mode mouse wheel support is added (default)\n *\n * @property DESKTOP_MODE\n * @static\n */\nScrollable.DESKTOP_MODE = 'desktop';\n\n/**\n * in mobile mode mouse wheel support is disabled\n *\n * @property MOBILE_MODE\n * @static\n */\nScrollable.MOBILE_MODE = 'mobile';\n\n/**\n * show horizontal scrollbar/slider\n *\n * @property HORIZONTAL\n * @static\n */\nScrollable.HORIZONTAL = 'horizontal';\n\n/**\n * show vertical scrollbar/slider\n *\n * @property VERTICAL\n * @static\n */\nScrollable.VERTICAL = 'vertical';\n\n/**\n * handle mouse down/touch start\n * move scroll thumb clicking somewhere on the scroll bar (outside the thumb)\n *\n * @method handleDown\n * @param mouseData mousedata provided by pixi\n */\nScrollable.prototype.handleDown = function(mouseData) {\n    var local = mouseData.data.getLocalPosition(this);\n    var center = {\n        x: local.x - this.thumb.width / 2,\n        y: local.y - this.thumb.height / 2\n    };\n    if (mouseData.target === this &&\n        this.moveThumb(center.x, center.y)) {\n        this._start = [local.x, local.y];\n        // do not override localX/localY in start\n        // if we do not move the thumb\n        this.thumbMoved(local.x, local.y);\n    }\n};\n\n/**\n * handle mouse up/touch end\n *\n * @method handleUp\n */\nScrollable.prototype.handleUp = function() {\n    this._start = null;\n};\n\n/**\n * handle mouse move: move thumb\n *\n * @method handleMove\n * @param mouseData mousedata provided by pixi\n */\nScrollable.prototype.handleMove = function(mouseData) {\n    if (this._start) {\n        var local = mouseData.data.getLocalPosition(this);\n        var x = this.thumb.x + local.x - this._start[0];\n        var y = this.thumb.y + local.y - this._start[1];\n        if (this.moveThumb(x, y)) {\n            // do not override localX/localY in start\n            // if we do not move the thumb\n            this.thumbMoved(x, y);\n            this._start[0] = local.x;\n            this._start[1] = local.y;\n        }\n    }\n};\n\n/**\n * handle mouse wheel: move thumb on track\n *\n * @method handleWheel\n * @param event mousewheel event from browser\n */\nScrollable.prototype.handleWheel = function (event) {\n    var x = this.thumb.x - event.delta * this.scrolldelta;\n    var y = this.thumb.y - event.delta * this.scrolldelta;\n    if (this.moveThumb(x, y)) {\n        this.thumbMoved(x, y);\n    }\n};\n\n/**\n * thumb has new x/y position\n *\n * @method thumbMoved\n * @param x x-position that has been scrolled to (ignored when vertical)\n * @param y y-position that has been scrolled to (ignored when horizontal)\n */\n/* jshint unused: false */\nScrollable.prototype.thumbMoved = function(x, y) {\n};\n\n/**\n * show the progress skin from the start/end of the scroll track to the current\n * position of the thumb.\n *\n * @method _updateProgressSkin\n * @private\n */\nScrollable.prototype._updateProgressSkin = function() {\n    if (!this.progressSkin) {\n        return;\n    }\n    if(this.orientation === Scrollable.HORIZONTAL) {\n        var progressPosX = this.thumb.x + this.thumb.width / 2;\n        if (this.inverse) {\n            this.progressSkin.x = progressPosX;\n            this.progressSkin.width = this.width - progressPosX;\n            this.progressSkin.height = this.skin.height;\n        } else {\n            this.progressSkin.x = 0;\n            this.progressSkin.width = progressPosX;\n            this.progressSkin.height = this.skin.height;\n        }\n    } else {\n        var progressPosY = this.thumb.y + this.thumb.height / 2;\n        if (this.inverse) {\n            this.progressSkin.y = progressPosY;\n            this.progressSkin.height = this.height - progressPosY;\n            this.progressSkin.width = this.skin.width;\n        } else {\n            this.progressSkin.y = 0;\n            this.progressSkin.height =progressPosY;\n            this.progressSkin.width = this.skin.width;\n        }\n    }\n};\n\n/**\n * returns the max. width in pixel\n * (normally this.width - thumb width)\n *\n * @method maxWidth\n * @returns {Number}\n */\nScrollable.prototype.maxWidth = function() {\n    return this.width - this.thumb.width;\n};\n\n/**\n * returns the max. height in pixel\n * (normally this.height - thumb height)\n *\n * @method maxHeight\n * @returns {Number}\n */\nScrollable.prototype.maxHeight = function() {\n    return this.height - this.thumb.height;\n};\n\n/**\n * move the thumb on the scroll bar within its bounds\n *\n * @param x new calculated x position of the thumb\n * @param y new calculated y position of the thumb\n * @returns {boolean} returns true if the position of the thumb has been\n * moved\n * @method moveThumb\n */\nScrollable.prototype.moveThumb = function(x, y) {\n    if (this.thumb.move(x, y)) {\n        this._updateProgressSkin();\n        return true;\n    }\n    return false;\n};\n\n/**\n * show scroll track\n *\n * @method showTrack\n * @param skin\n */\nScrollable.prototype.showTrack = function(skin) {\n    if (this.skin !== skin) {\n        if(this.skin) {\n            this.removeChild(this.skin);\n        }\n\n        this.addChildAt(skin, 0);\n        this.skin = skin;\n        if (this.progressSkin) {\n            this._updateProgressSkin();\n        }\n    }\n};\n\n/**\n * show progress on track (from the start/end of the track to the\n * current position of the thumb)\n *\n * @method showProgress\n * @param skin\n */\nScrollable.prototype.showProgress = function(skin) {\n    if (this.progressSkin !== skin) {\n        if(this.progressSkin) {\n            this.removeChild(this.progressSkin);\n        }\n        skin.width = skin.height = 0;\n        this.addChildAt(skin, 0);\n        this.progressSkin = skin;\n        if (this.skin) {\n            this._updateProgressSkin();\n        }\n    }\n};\n\n/**\n * redraw track and progressbar\n *\n * @method redraw\n */\nScrollable.prototype.redraw = function() {\n    if (this.invalidTrack && this.thumb) {\n        this.fromSkin(this.orientation+'_progress', this.showProgress);\n        this.fromSkin(this.orientation+'_track', this.showTrack);\n        if (this.skin) {\n            if (this.orientation === Scrollable.HORIZONTAL) {\n                this.skin.width = this.width;\n            } else {\n                this.skin.height = this.height;\n            }\n            this.invalidTrack = false;\n        }\n    }\n};\n\n\n/**\n * The width of the Scrollable, setting this will redraw the track and thumb.\n\n *\n * @property width\n * @type Number\n */\nObject.defineProperty(Scrollable.prototype, 'width', {\n    get: function() {\n        return this._width;\n    },\n    set: function(width) {\n        this._width = width;\n        this.invalidTrack = true;\n        if (this.thumb) {\n            this.thumb.invalidTrack = true;\n        }\n    }\n});\n\n/**\n * Inverse the progress bar\n *\n * @property inverse\n * @type Boolean\n */\nObject.defineProperty(Scrollable.prototype, 'inverse', {\n    get: function() {\n        return this._inverse;\n    },\n    set: function(inverse) {\n        if (inverse !== this._inverse) {\n            this._inverse = inverse;\n\n            if (this.orientation === Scrollable.HORIZONTAL) {\n                this.moveThumb(0, this.width - this.thumb.x);\n            } else {\n                this.moveThumb(0, this.height - this.thumb.y);\n            }\n\n            this.invalidTrack = true;\n            if (this.thumb) {\n                this.thumb.invalidTrack = true;\n            }\n        }\n    }\n});\n\n/**\n * The height of the Scrollable, setting this will redraw the track and thumb.\n *\n * @property height\n * @type Number\n */\nObject.defineProperty(Scrollable.prototype, 'height', {\n    get: function() {\n        return this._height;\n    },\n    set: function(height) {\n        this._height = height;\n        this.invalidTrack = true;\n        if (this.thumb) {\n            this.thumb.invalidTrack = true;\n        }\n    }\n});\n","var Scrollable = require('./Scrollable'),\n    SliderData = require('../../utils/SliderData');\n\n/**\n * Simple slider with min. and max. value\n *\n * @class Slider\n * @extends GOWN.Scrollable\n * @memberof GOWN\n * @constructor\n */\n\nfunction Slider(thumb, theme) {\n    this.skinName = this.skinName || Slider.SKIN_NAME;\n\n    this._minimum = this._minimum || 0;\n    this._maximum = this._maximum || 100;\n    this.step = this.step || 0; //TODO: implement me!\n    this.page = this.page || 10; //TODO: implement me!\n    this._value = this.minimum;\n    this.change = null;\n\n    Scrollable.call(this, thumb, theme);\n}\n\nSlider.prototype = Object.create( Scrollable.prototype );\nSlider.prototype.constructor = Slider;\nmodule.exports = Slider;\n\n\nSlider.SKIN_NAME = 'scroll_bar';\n\n/**\n * thumb has been moved - calculate new value\n *\n * @param x x-position to scroll to (ignored when vertical)\n * @param y y-position to scroll to (ignored when horizontal)\n */\nSlider.prototype.thumbMoved = function(x, y) {\n    var pos = 0;\n    if (this.orientation === Scrollable.HORIZONTAL) {\n        pos = x;\n    } else {\n        pos = y;\n    }\n    this.value = this.pixelToValue(pos);\n};\n\n/**\n * calculate value of slider based on current pixel position of thumb\n *\n * @param position\n * @method pixelToValue\n * @returns Number value between minimum and maximum\n */\nSlider.prototype.pixelToValue = function(position) {\n    var max = 0;\n    if (this.orientation === Scrollable.HORIZONTAL) {\n        max = this.maxWidth();\n    } else {\n        max = this.maxHeight();\n    }\n    if (this._inverse) {\n        position = max - position;\n    }\n    return position / max * (this.maximum - this.minimum) + this.minimum;\n};\n\n/**\n * calculate current pixel position of thumb based on given value\n *\n * @param value\n * @method valueToPixel\n * @returns Number position of the scroll thumb in pixel\n */\nSlider.prototype.valueToPixel = function(value) {\n    var max = 0;\n    if (this.orientation === Scrollable.HORIZONTAL) {\n        max = this.maxWidth();\n    } else {\n        max = this.maxHeight();\n    }\n    var position = (value - this.minimum) / (this.maximum - this.minimum) * max;\n    if (this._inverse) {\n        position = max - position;\n    }\n    return position;\n};\n\n/**\n * set value (between minimum and maximum)\n *\n * @property value\n * @type Number\n * @default 0\n */\nObject.defineProperty(Slider.prototype, 'value', {\n    get: function() {\n        return this._value;\n    },\n    set: function(value) {\n        if (isNaN(value)) {\n            return;\n        }\n        value = Math.min(value, this.maximum);\n        value = Math.max(value, this.minimum);\n        if (this._value === value) {\n            return;\n        }\n\n        // move thumb\n        var pos = this.valueToPixel(value);\n        if (this.orientation === Scrollable.HORIZONTAL) {\n            this.moveThumb(pos, 0);\n        } else {\n            this.moveThumb(0, pos);\n        }\n\n        this._value = value;\n        if (this.change) {\n            var sliderData = new SliderData();\n            sliderData.value = this._value;\n            sliderData.target = this;\n            this.change(sliderData);\n        }\n    }\n});\n\n/**\n * set minimum and update value if necessary\n *\n * @property minimum\n * @type Number\n * @default 0\n */\nObject.defineProperty(Slider.prototype, 'minimum', {\n    get: function() {\n        return this._minimum;\n    },\n    set: function(minimum) {\n        if(!isNaN(minimum) && this.minimum !== minimum && minimum < this.maximum) {\n            this._minimum = minimum;\n        }\n        if (this._value < this.minimum) {\n            this.value = this._value;\n        }\n    }\n});\n\n/**\n * set maximum and update value if necessary\n *\n * @property maximum\n * @type Number\n * @default 100\n */\nObject.defineProperty(Slider.prototype, 'maximum', {\n    get: function() {\n        return this._maximum;\n    },\n    set: function(maximum) {\n        if(!isNaN(maximum) && this.maximum !== maximum && maximum > this.minimum) {\n            this._maximum = maximum;\n        }\n        if (this._value > this.maximum) {\n            this.value = maximum;\n        }\n    }\n});\n","var Control = require('../Control'),\n    InputControl = require('./InputControl'),\n    InputWrapper = require('../../utils/InputWrapper');\n/**\n * The basic Text Input - based on PIXI.Input Input by Sebastian Nette,\n * see https://github.com/SebastianNette/PIXI.Input\n *\n * @class TextInput\n * @extends GOWN.InputControl\n * @memberof GOWN\n * @param text editable text shown in input\n * @param displayAsPassword Display TextInput as Password (default false)\n * @param theme default theme\n * @constructor\n */\n\nfunction TextInput(text, displayAsPassword, theme) {\n    // show and load background image as skin (exploiting skin states)\n    this.skinName = this.skinName || TextInput.SKIN_NAME;\n    this._validStates = this._validStates || TextInput.stateNames;\n    this._currentState = 'background';\n    this.invalidState = true;\n\n    InputControl.call(this, text, theme);\n\n    this._displayAsPassword = displayAsPassword || false;\n\n    /**\n     * timer used to indicate if the cursor is shown\n     *\n     * @property _cursorTimer\n     * @type {Number}\n     * @private\n     */\n    this._cursorTimer = 0;\n\n    /**\n     * indicates if the cursor position has changed\n     *\n     * @property _cursorNeedsUpdate\n     * @type {Boolean}\n     * @private\n     */\n\n    this._cursorNeedsUpdate = true;\n\n    /**\n     * interval for the cursor (in milliseconds)\n     *\n     * @property blinkInterval\n     * @type {number}\n     */\n    this.blinkInterval = 500;\n\n    /**\n     * selected area (start and end)\n     *\n     * @type {Array}\n     * @private\n     */\n    this.selection = [0, 0];\n\n    // caret/selection sprite\n    this.cursor = new PIXI.Text('|', this.theme.textStyle);\n    this.addChild(this.cursor);\n\n    // selection background\n    this.selectionBg = new PIXI.Graphics();\n    this.addChildAt(this.selectionBg, 0);\n\n    // set up events\n    this.boundOnMouseUp = this.onMouseUp.bind(this);\n    this.boundOnMouseUpOutside = this.onMouseUpOutside.bind(this);\n    this.boundOnMouseDown = this.onMouseDown.bind(this);\n    this.boundOnMouseMove = this.onMouseMove.bind(this);\n\n    this.mousemove = this.touchmove = this.boundOnMouseMove;\n    this.mousedown = this.touchstart = this.boundOnMouseDown;\n    this.mouseup = this.touchend = this.boundOnMouseUp;\n    this.mouseupoutside = this.touchendoutside = this.boundOnMouseUpOutside;\n}\n\nTextInput.prototype = Object.create(InputControl.prototype);\nTextInput.prototype.constructor = TextInput;\nmodule.exports = TextInput;\n\n\n// name of skin\nTextInput.SKIN_NAME = 'text_input';\n\n/**\n * set the text that is shown inside the input field.\n * calls onTextChange callback if text changes\n *\n * @property text\n * @type String\n */\nObject.defineProperty(TextInput.prototype, 'text', {\n    get: function () {\n        return this._text;\n    },\n    set: function (text) {\n        text += ''; // add '' to assure text is parsed as string\n        if (this._origText === text) {\n            // return if text has not changed\n            return;\n        }\n        this._origText = text;\n        if (this._displayAsPassword) {\n            text = text.replace(/./gi, '*');\n        }\n        this._text = text || '';\n        if (!this.pixiText) {\n            this.pixiText = new PIXI.Text(text, this.theme.textStyle);\n            this.addChild(this.pixiText);\n        } else {\n            this.pixiText.text = text;\n        }\n\n        // update text input if this text field has the focus\n        if (this.hasFocus) {\n            InputWrapper.setText(this.value);\n        }\n\n        // reposition cursor\n        this._cursorNeedsUpdate = true;\n        if (this.change) {\n            this.change(text);\n        }\n    }\n});\n\n/**\n * The maximum number of characters that may be entered. If 0,\n * any number of characters may be entered.\n * (same as maxLength for DOM inputs)\n *\n * @default 0\n * @property maxChars\n * @type String\n */\nObject.defineProperty(TextInput.prototype, 'maxChars', {\n    get: function () {\n        return this._maxChars;\n    },\n    set: function (value) {\n        if (this._maxChars === value) {\n            return;\n        }\n        InputWrapper.setMaxLength(value);\n        this._maxChars = value;\n    }\n});\n\nObject.defineProperty(TextInput.prototype, 'value', {\n    get: function() {\n        return this._origText;\n    }\n});\n\n/**\n * set text and type of DOM text input\n *\n * @method onfocus\n */\nTextInput.prototype.onfocus = function() {\n    InputWrapper.setText(this.value);\n    InputWrapper.setMaxLength(this.maxChars);\n    if (this._displayAsPassword) {\n        InputWrapper.setType('password');\n    } else {\n        InputWrapper.setType('text');\n    }\n};\n\n/**\n * set selected text\n *\n * @method updateSelection\n * @param start\n * @param end\n * @returns {boolean}\n */\nTextInput.prototype.updateSelection = function (start, end) {\n    if (this.selection[0] !== start || this.selection[1] !== end) {\n        this.selection[0] = start;\n        this.selection[1] = end;\n        InputWrapper.setSelection(start, end);\n        this._cursorNeedsUpdate = true;\n        this.updateSelectionBg();\n        return true;\n    } else {\n        return false;\n    }\n};\n\nTextInput.prototype.updateSelectionBg = function() {\n    var start = this.posToCoord(this.selection[0]),\n        end = this.posToCoord(this.selection[1]);\n\n    this.selectionBg.clear();\n    if (start !== end) {\n        this.selectionBg.beginFill(0x0080ff);\n        this.selectionBg.drawRect(0, 0, end - start, this.pixiText.height);\n        this.selectionBg.x = start;\n        this.selectionBg.y = this.pixiText.y;\n    }\n};\n\nTextInput.prototype.onblur = function() {\n    this.updateSelection(0, 0);\n};\n\nTextInput.prototype.onSubmit = function () {\n};\n\nTextInput.prototype.onKeyDown = function (e) {\n    var keyCode = e.which;\n\n    // ESC\n    if (e.which === 27) {\n        this.blur();\n        return;\n    }\n\n    // add support for Ctrl/Cmd+A selection - select whole input text\n    if (keyCode === 65 && (e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n        this.updateSelection(0, this.text.length);\n        return;\n    }\n\n    // block keys that shouldn't be processed\n    if (keyCode === 17 || e.metaKey || e.ctrlKey) {\n        return;\n    }\n\n    // enter key\n    if (keyCode === 13) {\n        e.preventDefault();\n        this.onSubmit(e);\n    }\n\n    // update the canvas input state information from the hidden input\n    this.updateTextState();\n};\n\nTextInput.prototype.onKeyUp = function () {\n    this.updateTextState();\n};\n\n/**\n * position cursor on the text\n */\nTextInput.prototype.setCursorPos = function () {\n    this.cursor.x = this.textWidth(this.text.substring(0, this.cursorPos)) | 0;\n};\n\n/**\n * draw the cursor\n *\n * @method drawCursor\n */\nTextInput.prototype.drawCursor = function () {\n    if (this.hasFocus || this._mouseDown) {\n        var time = Date.now();\n\n        // blink interval for cursor\n        if ((time - this._cursorTimer) >= this.blinkInterval) {\n            this._cursorTimer = time;\n            this.cursor.visible = !this.cursor.visible;\n        }\n\n        // update cursor position\n        if (this.cursor.visible && this._cursorNeedsUpdate) {\n            this.setCursorPos();\n            this._cursorNeedsUpdate = false;\n        }\n    } else {\n        this.cursor.visible = false;\n    }\n};\n\nTextInput.prototype.redraw = function () {\n    this.drawCursor();\n    Control.prototype.redraw.call(this);\n};\n\nTextInput.prototype.onMouseMove = function (e) {\n    var mouse = this.mousePos(e);\n    if (!this.hasFocus || !this._mouseDown || this.selectionStart < 0) { // || !this.containsPoint(mouse)) {\n        return false;\n    }\n\n    var curPos = this.clickPos(mouse.x, mouse.y),\n        start = Math.min(this.selectionStart, curPos),\n        end = Math.max(this.selectionStart, curPos);\n\n    if (this.updateSelection(start, end)) {\n        this.cursorPos = curPos;\n        this.setCursorPos();\n        this._cursorNeedsUpdate = true;\n    }\n    return true;\n};\n\nTextInput.prototype.onMouseDown = function (e) {\n    var originalEvent = e.data.originalEvent;\n    if (originalEvent.which === 2 || originalEvent.which === 3) {\n        originalEvent.preventDefault();\n        return false;\n    }\n\n    // focus input\n    this.focus();\n\n    this._mouseDown = true;\n    var mouse = this.mousePos(e);\n\n    // start the selection drag if inside the input\n    this.selectionStart = this.clickPos(mouse.x, mouse.y);\n    this.updateSelection(this.selectionStart, this.selectionStart);\n    this.cursorPos = this.selectionStart;\n    this.setCursorPos();\n    return true;\n};\n\nTextInput.prototype.onMouseUp = function (e) {\n    var originalEvent = e.data.originalEvent;\n    if (originalEvent.which === 2 || originalEvent.which === 3) {\n        originalEvent.preventDefault();\n        return false;\n    }\n\n    var mouse = this.mousePos(e);\n\n    // update selection if a drag has happened\n    var clickPos = this.clickPos(mouse.x, mouse.y);\n\n    // update the cursor position\n    if (!(this.selectionStart >= 0 && clickPos !== this.selectionStart)) {\n        this.cursorPos = clickPos;\n        this.setCursorPos();\n        this.updateSelection(this.cursorPos, this.cursorPos);\n    }\n\n    this.selectionStart = -1;\n    this._mouseDown = false;\n    return true;\n};\n\n/**\n * synchronize TextInput with DOM element\n *\n * @method updateTextState\n */\nTextInput.prototype.updateTextState = function () {\n    var text = InputWrapper.getText();\n\n    if (text !== this.text) {\n        this.text = text;\n    }\n\n    var sel = InputWrapper.getSelection();\n    if (this.updateSelection(sel[0], sel[1])) {\n        this.cursorPos = sel[0];\n    }\n    this.setCursorPos();\n};\n","var Button = require('./Button');\n\n/**\n * basic button that has a selected state which indicates if the button\n * is pressed or not.\n *\n * @class ToggleButton\n * @extends GOWN.Button\n * @memberof GOWN\n * @constructor\n */\nfunction ToggleButton(theme) {\n    this.skinName = this.skinName || ToggleButton.SKIN_NAME;\n    this._validStates = Button.stateNames.slice(0);\n    this._validStates.push(ToggleButton.SELECTED_UP);\n    this._validStates.push(ToggleButton.SELECTED_DOWN);\n    this._validStates.push(ToggleButton.SELECTED_HOVER);\n    Button.call(this, theme);\n\n    /**\n     * The pressed state of the Button\n     *\n     * @property selected\n     * @type Boolean\n     */\n    this._selected = false;\n}\n\nToggleButton.prototype = Object.create( Button.prototype );\nToggleButton.prototype.constructor = ToggleButton;\nmodule.exports = ToggleButton;\n\n\nToggleButton.SKIN_NAME = 'toggle_button';\n\nToggleButton.SELECTED_UP = 'selected_up';\nToggleButton.SELECTED_DOWN = 'selected_down';\nToggleButton.SELECTED_HOVER = 'selected_hover';\n\nvar originalCurrentState = Object.getOwnPropertyDescriptor(Button.prototype, 'currentState');\n\n/**\n * The current state (one of _validStates)\n *\n * @property currentState\n * @type String\n */\nObject.defineProperty(ToggleButton.prototype, 'currentState',{\n    set: function(value) {\n        if (this._selected) {\n            value = 'selected_' + value;\n        }\n        originalCurrentState.set.call(this, value);\n    }\n});\n\n/**\n * Indicate if the button is selected (pressed)\n *\n * @property selected\n * @type Boolean\n */\nObject.defineProperty(ToggleButton.prototype, 'selected', {\n    set: function(selected) {\n        var state = this._currentState;\n        this.invalidState = this._selected !== selected || this.invalidState;\n        if (state.indexOf('selected_') === 0) {\n            state = state.substr(9, state.length);\n        }\n        this._selected = selected;\n        this._pressed = false; //to prevent toggling on touch/mouse up\n        this.currentState = state;\n    },\n    get: function() {\n        return this._selected;\n    }\n});\n\n/**\n * toggle state\n */\nToggleButton.prototype.toggle = function() {\n    this.selected = !this._selected;\n};\n\n\nToggleButton.prototype.buttonHandleEvent = Button.prototype.handleEvent;\n\n/**\n * handle Touch/Tab Event\n * @method handleEvent\n * @param {Object} type the type of the press/touch.\n * @protected\n **/\nToggleButton.prototype.handleEvent = function(type) {\n    if (!this._enabled) {\n        return;\n    }\n\n    if (type === Button.UP && this._pressed) {\n        this.toggle();\n    }\n    this.buttonHandleEvent(type);\n};\n","/**\n * @file        Main export of the gown.js core library\n * @author      Andreas Bresser <andreasbresser@gmail.com>\n * @copyright   2015 Andreas Bresser\n * @license     {@link https://github.com/brean/gown.js/blob/master/LICENSE|Apache License}\n */\n\n/**\n * @namespace GOWN.core\n */\nmodule.exports = {\n    Control:        require('./Control'),\n    Skinable:       require('./Skinable'),\n\n    // controls\n    Application:            require('./controls/Application'),\n    Button:                 require('./controls/Button'),\n    CheckBox:               require('./controls/CheckBox'),\n    InputControl:           require('./controls/InputControl'),\n    LayoutGroup:            require('./controls/LayoutGroup'),\n    Scrollable:             require('./controls/Scrollable'),\n    ScrollArea:             require('./controls/ScrollArea'),\n    ScrollBar:              require('./controls/ScrollBar'),\n    ScrollThumb:            require('./controls/ScrollThumb'),\n    Slider:                 require('./controls/Slider'),\n    TextInput:              require('./controls/TextInput'),\n    ToggleButton:           require('./controls/ToggleButton'),\n\n    // layout\n    HorizontalLayout:     require('./layout/HorizontalLayout'),\n    Layout:               require('./layout/Layout'),\n    LayoutAlignment:      require('./layout/LayoutAlignment'),\n    TiledColumnsLayout:   require('./layout/TiledColumnsLayout'),\n    TiledLayout:          require('./layout/TiledLayout'),\n    TiledRowsLayout:      require('./layout/TiledRowsLayout'),\n    VerticalLayout:       require('./layout/VerticalLayout'),\n    ViewPortBounds:       require('./layout/ViewPortBounds'),\n\n    // shapes\n    Diamond:           require('./shapes/Diamond'),\n    Ellipse:           require('./shapes/Ellipse'),\n    Line:              require('./shapes/Line'),\n    Rect:              require('./shapes/Rect'),\n    Shape:             require('./shapes/Shape'),\n\n    // skin\n    Theme:           require('./skin/Theme')\n};\n","var LayoutAlignment = require('./LayoutAlignment');\n\n/**\n * HorizontalLayout - just set alignment to\n * LayoutAlignment.HORIZONTAL_ALIGNMENT\n *\n * @class HorizontalLayout\n * @extends GOWN.LayoutAlignment\n * @memberof GOWN\n * @constructor\n */\nfunction HorizontalLayout() {\n    LayoutAlignment.call(this);\n    this.alignment = LayoutAlignment.HORIZONTAL_ALIGNMENT;\n}\n\nHorizontalLayout.prototype = Object.create( LayoutAlignment.prototype );\nHorizontalLayout.prototype.constructor = HorizontalLayout;\nmodule.exports = HorizontalLayout;\n","/**\n * basic layout stub - see LayoutAlignment\n *\n * @class Layout\n * @memberof GOWN\n * @constructor\n */\nfunction Layout() {\n    this.gap = 0;\n    this.padding = 0;\n}\n\nmodule.exports = Layout;\n\n/**\n * If the total item height is smaller than the height of the bounds,\n * the items will be aligned to the top.\n *\n * @property VERTICAL_ALIGN_TOP\n * @static\n */\nLayout.VERTICAL_ALIGN_TOP = 'top';\n\n/**\n * If the total item height is smaller than the height of the bounds,\n * the items will be aligned to the middle.\n *\n * @property VERTICAL_ALIGN_MIDDLE\n * @static\n */\nLayout.VERTICAL_ALIGN_MIDDLE = 'middle';\n\n/**\n * Alignment justified\n *\n * @property ALIGN_JUSTIFY\n * @static\n */\nLayout.ALIGN_JUSTIFY = 'justify';\n\n/**\n * If the total item height is smaller than the height of the bounds,\n * the items will be aligned to the bottom.\n *\n * @property VERTICAL_ALIGN_BOTTOM\n * @static\n */\nLayout.VERTICAL_ALIGN_BOTTOM = 'bottom';\n\n/**\n * If the total item width is smaller than the width of the bounds, the\n * items will be aligned to the left.\n *\n * @property HORIZONTAL_ALIGN_LEFT\n * @static\n */\nLayout.HORIZONTAL_ALIGN_LEFT = 'left';\n\n/**\n * If the total item width is smaller than the width of the bounds, the\n * items will be aligned to the center.\n *\n * @property HORIZONTAL_ALIGN_CENTER\n * @static\n */\nLayout.HORIZONTAL_ALIGN_CENTER = 'center';\n\n/**\n * If the total item width is smaller than the width of the bounds, the\n * items will be aligned to the right.\n *\n * @property HORIZONTAL_ALIGN_RIGHT\n * @static\n */\nLayout.HORIZONTAL_ALIGN_RIGHT = 'right';\n\n\n\n/**\n * The space, in pixels, between items.\n *\n * @property gap\n * @type Number\n */\nObject.defineProperty(Layout.prototype, 'gap', {\n    get: function() {\n        return this._gap;\n    },\n    set: function(value) {\n        if(this._gap === value) {\n            return;\n        }\n        this._gap = value;\n        this._needUpdate = true;\n    }\n});\n\n/**\n * Indicates if the layout needs to be rearranged.\n *\n * @property needUpdate\n * @readonly\n */\nObject.defineProperty(Layout.prototype, 'needUpdate', {\n    get: function() {\n        return this._needUpdate;\n    }\n});\n\n/**\n * shotrtcut to set all paddings (left, right, top, bottom)\n *\n * @property padding\n * @type Number\n */\nObject.defineProperty(Layout.prototype, 'padding', {\n    set: function(value) {\n        this._paddingLeft = value;\n        this._paddingRight = value;\n        this._paddingBottom = value;\n        this._paddingTop = value;\n        this._needUpdate = true;\n    },\n    get: function (){\n        // just return paddingTop, because we do not save the\n        // overall padding value (just like feathers)\n        return this._paddingTop;\n    }\n});\n\n/**\n * The minimum space, in pixels, above the items.\n *\n * @default 0\n * @property paddingTop\n * @type Number\n */\nObject.defineProperty(Layout.prototype, 'paddingTop', {\n    get:  function() {\n        return this._paddingTop;\n    },\n    set: function(value) {\n        if(this._paddingTop === value) {\n            return;\n        }\n        this._paddingTop = value;\n        this._needUpdate = true;\n    }\n});\n\n/**\n * The minimum space, in pixels, below the items.\n *\n * @default 0\n * @property paddingTop\n * @type Number\n */\nObject.defineProperty(Layout.prototype, 'paddingBottom', {\n    get:  function() {\n        return this._paddingBottom;\n    },\n    set: function(value) {\n        if(this._paddingBottom === value) {\n            return;\n        }\n        this._paddingBottom = value;\n        this._needUpdate = true;\n    }\n});\n\n/**\n * The space, in pixels, that appears to the left, before the first\n * item.\n *\n * @default 0\n * @property paddingLeft\n * @type Number\n */\nObject.defineProperty(Layout.prototype, 'paddingLeft', {\n    get:  function() {\n        return this._paddingLeft;\n    },\n    set: function(value) {\n        if(this._paddingLeft === value) {\n            return;\n        }\n        this._paddingLeft = value;\n        this._needUpdate = true;\n    }\n});\n\n/**\n * The space, in pixels, that appears to the right, after the last item.\n *\n * @default 0\n * @property paddingLeft\n * @type Number\n */\nObject.defineProperty(Layout.prototype, 'paddingRight', {\n    get:  function() {\n        return this._paddingRight;\n    },\n    set: function(value) {\n        if(this._paddingRight === value) {\n            return;\n        }\n        this._paddingRight = value;\n        this._needUpdate = true;\n    }\n});\n\n/**\n * Position (and possibly resizes) the supplied items.\n *\n * @method layout\n * @param items items that will be layouted {Array}\n * @param viewPortBounds {ViewPortBounds}\n */\n/* jshint unused: false */\nLayout.prototype.layout = function (items, viewPortBounds) {\n};\n","var Layout = require('./Layout');\n\n/**\n * basic layout\n *\n * @class LayoutAlignment\n * @extends GOWN.Layout\n * @memberof GOWN\n * @constructor\n */\nfunction LayoutAlignment() {\n    Layout.call(this);\n}\n\nLayoutAlignment.prototype = Object.create( Layout.prototype );\nLayoutAlignment.prototype.constructor = LayoutAlignment;\nmodule.exports = LayoutAlignment;\n\nLayoutAlignment.VERTICAL_ALIGNMENT = 'vertical';\nLayoutAlignment.HORIZONTAL_ALIGNMENT = 'horizontal';\n\n/**\n * apply percentage width/height to items.\n * percentages have higher priorities than fixed with.\n * So if you set a width higher than 0 but also percentWidth,\n * the width will be recalculated according to percentWidth.\n *\n * @method applyPercent\n * @param items\n * @param explicit space we have for the components\n * (this function will handle padding and gap, so the explicitWidth is\n *  for the whole available width)\n */\nLayoutAlignment.prototype.applyPercent = function(items, explicit) {\n    var _hor = (this.alignment === LayoutAlignment.HORIZONTAL_ALIGNMENT);\n\n    var itemCount = items.length;\n    var remaining = explicit;\n    var totalExplicit = 0;\n    var totalPercent = 0;\n\n    var i, itemPercent, item;\n    // sum up width/height required for all items\n    for (i = 0; i < itemCount; i++) {\n        item = items[i];\n        var itemSpace;\n        itemPercent = _hor ? item.percentWidth : item.percentHeight;\n        itemSpace = _hor ? item.width : item.height;\n\n        if (!isNaN(itemPercent) && itemPercent !== undefined &&\n            itemPercent !== null) {\n            totalPercent += itemPercent;\n        } else if (!isNaN(itemSpace)) {\n            // no percentWidth/percentHeight set for this item\n            totalExplicit += itemSpace;\n        }\n    }\n\n    // add space for all gaps\n    totalExplicit += this._firstGap > 0 ? this._firstGap : this._gap;\n    totalExplicit += (this._gap * (itemCount - 3));\n    totalExplicit += this._lastGap > 0 ? this._lastGap : this._gap;\n\n    var padding = _hor ?\n        this._paddingLeft + this._paddingRight :\n        this._paddingTop + this._paddingBottom;\n    totalExplicit += padding;\n\n    // use whole available space - if we do not sum up to 100 we will\n    // stretch the items\n    if(totalPercent < 100) {\n        totalPercent = 100;\n    }\n\n    remaining -= totalExplicit;\n    var percentToPixels = remaining / totalPercent;\n    // claculate width/height for each item based on remaining width/height\n    for(i = 0; i < itemCount; i++) {\n        item = items[i];\n        itemPercent = _hor ? item.percentWidth : item.percentHeight;\n        if (itemPercent > 0) {\n            if (_hor) {\n                item.width = percentToPixels * itemPercent;\n            } else {\n                item.height = percentToPixels * itemPercent;\n            }\n        }\n    }\n};\n\n/**\n * get current gap (includes first and last gap)\n *\n * @method _currentGap\n * @private\n * @param i current item position\n * @param items list of items (to determine if we are at the last gap)\n */\nLayoutAlignment.prototype._currentGap = function(i, items) {\n    if(!isNaN(this._firstGap) && i === 0)\n    {\n        return this._firstGap;\n    }\n    else if(!isNaN(this._lastGap) && i > 0 && i === items.length - 2)\n    {\n        return this._lastGap;\n    }\n    return this._gap;\n};\n\n/**\n * Position (and possibly resizes) the supplied items.\n *\n * @method layout\n * @param items items that will be layouted {Array}\n * @param viewPortBounds {ViewPortBounds}\n */\nLayoutAlignment.prototype.layout = function(items, viewPortBounds) {\n    var _hor = (this.alignment === LayoutAlignment.HORIZONTAL_ALIGNMENT);\n\n    // get max. dimensions from viewport bounds\n    var explicitWidth = viewPortBounds ? viewPortBounds.explicitWidth : NaN;\n    var explicitHeight = viewPortBounds ? viewPortBounds.explicitHeight : NaN;\n\n    var explicitSpace = _hor ? explicitWidth : explicitHeight;\n    var paddingStart = _hor ? this._paddingLeft : this._paddingTop;\n\n    // recalculate width/height\n    this.applyPercent(items, explicitSpace);\n\n    var position = paddingStart;\n\n    // calculate item position (x/y coordinates)\n    for(var i = 0; i < items.length; i++)\n    {\n        var item = items[i];\n\n        // move item to position calculated in previous loop\n        if (_hor) {\n            item.x = Math.floor(position);\n        } else {\n            item.y = Math.floor(position);\n        }\n        var itemSpace = _hor ? item.width : item.height;\n        // calculate position for next item\n        position += itemSpace + this._currentGap(i, items);\n    }\n};\n\n/**\n * The space between the first and second element\n *\n * @property firstGap\n * @type String\n */\nObject.defineProperty(LayoutAlignment.prototype, 'firstGap', {\n    set: function(value) {\n        if (value === this._firstGap) {\n            return;\n        }\n        this._firstGap = value;\n        this._needUpdate = true;\n    },\n    get: function() {\n        return this._firstGap;\n    }\n});\n\n/**\n * The space between the last and second-to-last element\n *\n * @property firstGap\n * @type String\n */\nObject.defineProperty(LayoutAlignment.prototype, 'lastGap', {\n    set: function(value) {\n        if (value === this._lastGap) {\n            return;\n        }\n        this._lastGap = value;\n        this._needUpdate = true;\n    },\n    get: function() {\n        return this._lastGap;\n    }\n});","var TiledLayout = require('./TiledLayout');\n\n/**\n * Tiled columns Layout\n * (roughly based on starling TiledColumnsLayout)\n *\n * @class TiledColumnsLayout\n * @extends GOWN.TiledLayout\n * @memberof GOWN\n * @constructor\n */\n\nfunction TiledColumnsLayout() {\n    TiledLayout.call(this);\n    this._paging = TiledLayout.PAGING_VERTICAL;\n    this._orientation = TiledLayout.ORIENTATION_COLUMNS;\n}\n\nTiledColumnsLayout.prototype = Object.create( TiledLayout.prototype );\nTiledColumnsLayout.prototype.constructor = TiledColumnsLayout;\nmodule.exports = TiledColumnsLayout;\n\n/**\n * Quickly sets both <code>horizontalGap</code> and <code>verticalGap</code>\n * to the same value. The <code>gap</code> getter always returns the\n * value of <code>verticalGap</code>, but the value of\n * <code>horizontalGap</code> may be different.\n *\n * @default 0\n *\n * @see #_horizontalGap\n * @see #_verticalGap\n * @property gap\n * @type Number\n */\nObject.defineProperty(TiledColumnsLayout.prototype, 'gap', {\n    set: function(value) {\n        this._verticalGap = value;\n        this._horizontalGap = value;\n        this._needUpdate = true;\n    },\n    get: function() {\n        return this._verticalGap;\n    }\n});","var Layout = require('./Layout');\n\n/**\n * TiledLayout a layout for tiled rows/columns\n *\n * @class TiledLayout\n * @extends GOWN.Layout\n * @memberof GOWN\n * @constructor\n */\nfunction TiledLayout() {\n    Layout.call(this);\n    this._useSquareTiles = false;\n    this._horizontalGap = 0;\n    this._verticalGap = 0;\n    this._tileHorizontalAlign = TiledLayout.TILE_HORIZONTAL_ALIGN_CENTER;\n    this._tileVerticalAlign = TiledLayout.TILE_VERTICAL_ALIGN_MIDDLE;\n    this._paging = TiledLayout.PAGING_NONE;\n    this._orientation = TiledLayout.ORIENTATION_ROWS;\n    this._needUpdate = true;\n}\n\nTiledLayout.prototype = Object.create( Layout.prototype );\nTiledLayout.prototype.constructor = TiledLayout;\nmodule.exports = TiledLayout;\n\n\nTiledLayout.ORIENTATION_ROWS = 'rows';\nTiledLayout.ORIENTATION_COLUMNS = 'columns';\n\n/**\n * If an item height is smaller than the height of a tile, the item will\n * be aligned to the top edge of the tile.\n *\n * @property TILE_VERTICAL_ALIGN_TOP\n * @static\n */\nTiledLayout.TILE_VERTICAL_ALIGN_TOP = 'top';\n\n/**\n * If an item height is smaller than the height of a tile, the item will\n * be aligned to the middle of the tile.\n *\n * @property TILE_VERTICAL_ALIGN_MIDDLE\n * @static\n */\nTiledLayout.TILE_VERTICAL_ALIGN_MIDDLE = 'middle';\n\n/**\n * If an item height is smaller than the height of a tile, the item will\n * be aligned to the bottom edge of the tile.\n *\n * @property TILE_VERTICAL_ALIGN_BOTTOM\n * @static\n */\nTiledLayout.TILE_VERTICAL_ALIGN_BOTTOM = 'bottom';\n\n/**\n * The item will be resized to fit the height of the tile.\n *\n * @property TILE_VERTICAL_ALIGN_JUSTIFY\n * @static\n */\nTiledLayout.TILE_VERTICAL_ALIGN_JUSTIFY = 'justify';\n\n/**\n * If an item width is smaller than the width of a tile, the item will\n * be aligned to the left edge of the tile.\n *\n * @property TILE_HORIZONTAL_ALIGN_LEFT\n * @static\n */\nTiledLayout.TILE_HORIZONTAL_ALIGN_LEFT = 'left';\n\n/**\n * If an item width is smaller than the width of a tile, the item will\n * be aligned to the center of the tile.\n *\n * @property TILE_HORIZONTAL_ALIGN_CENTER\n * @static\n */\nTiledLayout.TILE_HORIZONTAL_ALIGN_CENTER = 'center';\n\n/**\n * If an item width is smaller than the width of a tile, the item will\n * be aligned to the right edge of the tile.\n *\n * @property TILE_HORIZONTAL_ALIGN_RIGHT\n * @static\n */\nTiledLayout.TILE_HORIZONTAL_ALIGN_RIGHT = 'right';\n\n/**\n * The item will be resized to fit the width of the tile.\n *\n * @property TILE_HORIZONTAL_ALIGN_JUSTIFY\n * @static\n */\nTiledLayout.TILE_HORIZONTAL_ALIGN_JUSTIFY = 'justify';\n\n/**\n * The items will be positioned in pages horizontally from left to right.\n *\n * @property PAGING_HORIZONTAL\n * @static\n */\nTiledLayout.PAGING_HORIZONTAL = 'horizontal';\n\n/**\n * The items will be positioned in pages vertically from top to bottom.\n *\n * @property PAGING_VERTICAL\n * @static\n */\nTiledLayout.PAGING_VERTICAL = 'vertical';\n\n\n/**\n * Positions (and possibly resizes) the supplied items.\n *\n * @method layout\n * @param items items that will be layouted\n * @param viewPortBounds\n */\nTiledLayout.prototype.layout = function (items, viewPortBounds) {\n    var _rows = this._orientation === TiledLayout.ORIENTATION_ROWS;\n    if(items.length === 0) {\n        return;\n    }\n\n    var maxWidth = viewPortBounds ? viewPortBounds.maxWidth : Number.POSITIVE_INFINITY;\n    var maxHeight = viewPortBounds ? viewPortBounds.maxHeight : Number.POSITIVE_INFINITY;\n    var explicitWidth = viewPortBounds ? viewPortBounds.explicitWidth : NaN;\n    var explicitHeight = viewPortBounds ? viewPortBounds.explicitHeight : NaN;\n\n    var i, item;\n    var tileWidth = 0;\n    var tileHeight = 0;\n\n    // get size for tiles by saving the highest/widest tile.\n    for(i = 0; i < items.length; i++) {\n        item = items[i];\n        if(!item) {\n            continue;\n        }\n        var itemWidth = item.width;\n        var itemHeight = item.height;\n        if(itemWidth > tileWidth) {\n            tileWidth = itemWidth;\n        }\n        if(itemHeight > tileHeight) {\n            tileHeight = itemHeight;\n        }\n    }\n\n    // make tiles square\n    if (this._useSquareTiles) {\n        if(tileWidth > tileHeight) {\n            tileHeight = tileWidth;\n        }\n        else if(tileHeight > tileWidth) {\n            tileWidth = tileHeight;\n        }\n    }\n\n    // calculate tiles needed (and their width/height)\n    var availableWidth = NaN;\n    var availableHeight = NaN;\n\n    var horizontalTileCount = _rows ? items.length : 1;\n\n    if(!isNaN(explicitWidth)) {\n        availableWidth = explicitWidth;\n        horizontalTileCount = (explicitWidth -\n            this._paddingLeft - this._paddingRight +\n            this._horizontalGap) / (tileWidth + this._horizontalGap);\n    }\n    else if(!isNaN(maxWidth)) {\n        availableWidth = maxWidth;\n        horizontalTileCount = (maxWidth -\n            this._paddingLeft - this._paddingRight +\n            this._horizontalGap) / (tileWidth + this._horizontalGap);\n    }\n    horizontalTileCount = Math.floor(Math.max(horizontalTileCount, 1));\n\n    var verticalTileCount = _rows ? 1 : items.length;\n    if(!isNaN(explicitHeight)) {\n        availableHeight = explicitHeight;\n        verticalTileCount = (explicitHeight -\n            this._paddingTop - this._paddingBottom +\n            this._verticalGap) / (tileHeight + this._verticalGap);\n    } else if(!isNaN(maxHeight)) {\n        availableHeight = maxHeight;\n        verticalTileCount = (maxHeight -\n            this._paddingTop - this._paddingBottom +\n            this._verticalGap) / (tileHeight + this._verticalGap);\n    }\n    verticalTileCount = Math.floor(Math.max(verticalTileCount, 1));\n\n    var startX = this._paddingLeft;\n    var startY = this._paddingTop;\n\n    var perPage = horizontalTileCount * verticalTileCount;\n    var pageIndex = 0;\n    var nextPageStartIndex = perPage;\n    var pageStart = _rows ? startX : startY;\n    var positionX = startX;\n    var positionY = startY;\n    var itemIndex = 0;\n    for(i = 0; i < items.length; i++)\n    {\n        item = items[i];\n        if (_rows) {\n            if(itemIndex !== 0 && itemIndex % horizontalTileCount === 0)\n            {\n                positionX = pageStart;\n                positionY += tileHeight + this._verticalGap;\n            }\n        } else { // columns\n            if(itemIndex !== 0 && i % verticalTileCount === 0)\n            {\n                positionX += tileWidth + this._horizontalGap;\n                positionY = pageStart;\n            }\n        }\n        if(itemIndex === nextPageStartIndex) {\n            pageIndex++;\n            nextPageStartIndex += perPage;\n\n            //we can use availableWidth and availableHeight here without\n            //checking if they're NaN because we will never reach a\n            //new page without them already being calculated.\n            if (_rows) {\n                if(this._paging === TiledLayout.PAGING_HORIZONTAL)\n                {\n                    positionX = pageStart === startX + availableWidth * pageIndex;\n                    positionY = startY;\n                } else if(this._paging === TiledLayout.PAGING_VERTICAL) {\n                    positionY = startY + availableHeight * pageIndex;\n                }\n            } else { // columns\n                if(this._paging === TiledLayout.PAGING_HORIZONTAL) {\n                    positionX = startX + availableWidth * pageIndex;\n                } else if(this._paging === TiledLayout.PAGING_VERTICAL) {\n                    positionX = startX;\n                    positionY = pageStart = startY + availableHeight * pageIndex;\n                }\n            }\n        }\n        if(item) {\n            switch(this._tileHorizontalAlign) {\n                case TiledLayout.TILE_HORIZONTAL_ALIGN_JUSTIFY:\n                    item.x = positionX;\n                    item.width = tileWidth;\n                    break;\n                case TiledLayout.TILE_HORIZONTAL_ALIGN_LEFT:\n                    item.x = positionX;\n                    break;\n                case TiledLayout.TILE_HORIZONTAL_ALIGN_RIGHT:\n                    item.x = positionX + tileWidth - item.width;\n                    break;\n                default: //center or unknown\n                    item.x = positionX + (tileWidth - item.width) / 2;\n            }\n            switch(this._tileVerticalAlign) {\n                case TiledLayout.TILE_VERTICAL_ALIGN_JUSTIFY:\n                    item.y = positionY;\n                    item.height = tileHeight;\n                    break;\n                case TiledLayout.TILE_VERTICAL_ALIGN_TOP:\n                    item.y = positionY;\n                    break;\n                case TiledLayout.TILE_VERTICAL_ALIGN_BOTTOM:\n                    item.y = positionY + tileHeight - item.height;\n                    break;\n                default: //middle or unknown\n                    item.y = positionY + (tileHeight - item.height) / 2;\n            }\n        }\n        if (_rows) {\n            positionX += tileWidth + this._horizontalGap;\n        } else { // columns\n            positionY += tileHeight + this._verticalGap;\n        }\n        itemIndex++;\n    }\n\n    this._needUpdate = false;\n};\n\n/**\n * use same width and height for the tiles (calculated by biggest square)\n *\n * @property useSquareTiles\n * @type Boolean\n */\nObject.defineProperty(TiledLayout.prototype, 'useSquareTiles', {\n    set: function(useSquareTiles) {\n        this._useSquareTiles = useSquareTiles;\n        this._needUpdate = true;\n    },\n    get: function() {\n        return this._useSquareTiles;\n    }\n});","var TiledLayout = require('./TiledLayout');\n\n/**\n * Tiled rows Layout\n * (roughly based on starling TiledRowsLayout)\n *\n * @class TiledRowsLayout\n * @extends GOWN.TiledLayout\n * @memberof GOWN\n * @constructor\n */\nfunction TiledRowsLayout() {\n    TiledLayout.call(this);\n    this._paging = TiledLayout.PAGING_HORIZONTAL;\n    this._orientation = TiledLayout.ORIENTATION_ROWS;\n}\n\nTiledRowsLayout.prototype = Object.create( TiledLayout.prototype );\nTiledRowsLayout.prototype.constructor = TiledRowsLayout;\nmodule.exports = TiledRowsLayout;\n\n/**\n * Quickly sets both <code>horizontalGap</code> and <code>verticalGap</code>\n * to the same value. The <code>gap</code> getter always returns the\n * value of <code>horizontalGap</code>, but the value of\n * <code>verticalGap</code> may be different.\n *\n * @default 0\n *\n * @see #_horizontalGap\n * @see #_verticalGap\n *\n * @property gap\n * @type Number\n */\nObject.defineProperty(TiledRowsLayout.prototype, 'gap', {\n    get: function() {\n        return this._horizontalGap;\n    },\n    set: function(value) {\n        this._verticalGap = value;\n        this._horizontalGap = value;\n        this._needUpdate = true;\n    }\n});","var LayoutAlignment = require('./LayoutAlignment');\n\n/**\n * VerticalLayout - just set alignment to\n * LayoutAlignment.VERTICAL_ALIGNMENT\n *\n * @class VerticalLayout\n * @extends GOWN.LayoutAlignment\n * @memberof GOWN\n * @constructor\n */\nfunction VerticalLayout() {\n    LayoutAlignment.call(this);\n    this.alignment = LayoutAlignment.VERTICAL_ALIGNMENT;\n}\n\nVerticalLayout.prototype = Object.create( LayoutAlignment.prototype );\nVerticalLayout.prototype.constructor = VerticalLayout;\nmodule.exports = VerticalLayout;\n","/**\n * define viewport dimensions\n *\n * @class HorizontalLayout\n * @memberof GOWN\n * @constructor\n */\nfunction ViewPortBounds() {\n    /**\n     * The explicit width of the view port, in pixels. If <code>NaN</code>,\n     * there is no explicit width value.\n     *\n     * @property explicitWidth\n     */\n    this.explicitWidth = NaN;\n\n    /**\n     * The explicit height of the view port, in pixels. If <code>NaN</code>,\n     * there is no explicit height value.\n     *\n     * @property explicitHeight\n     */\n    this.explicitHeight = NaN;\n\n    /**\n     * x-position\n     *\n     * @property x\n     */\n    this.x = 0;\n\n    /**\n     * y-position\n     *\n     * @property y\n     */\n    this.y = 0;\n}\n\nmodule.exports = ViewPortBounds;","var Shape = require('./Shape');\n\n/**\n * basic diamond shape\n *\n * @class Diamond\n * @extends GOWN.Shape\n * @memberof GOWN\n * @constructor\n */\nfunction Diamond(color, alpha, width, height) {\n    Shape.call(this, color, alpha, width, height);\n}\n\nDiamond.prototype = Object.create( Shape.prototype );\nDiamond.prototype.constructor = Diamond;\nmodule.exports = Diamond;\n\n/**\n * draw the diamond during redraw.\n *\n * @method _drawShape\n * @private\n */\nDiamond.prototype._drawShape = function() {\n    if (this.width <= 0 || this.height <= 0) {\n        return;\n    }\n    this.graphics.moveTo(this._width/2, 0)\n        .lineTo(this._width, this._height/2)\n        .lineTo(this._width/2, this._height)\n        .lineTo(0, this._height/2)\n        .lineTo(this._width/2, 0);\n};","var Shape = require('./Shape');\n\n/**\n * basic ellipse shape\n *\n * @class Ellipse\n * @extends GOWN.Shape\n * @memberof GOWN\n * @constructor\n */\nfunction Ellipse(color, alpha, width, height) {\n    Shape.call(this, color, alpha, width, height);\n}\n\nEllipse.prototype = Object.create( Shape.prototype );\nEllipse.prototype.constructor = Ellipse;\nmodule.exports = Ellipse;\n\n/**\n * draw the ellipse during redraw.\n *\n * @method _drawShape\n * @private\n */\nEllipse.prototype._drawShape = function() {\n    if (this.width <= 0 || this.height <= 0) {\n        return;\n    }\n    this.drawEllipse(0, 0, this.width, this.height);\n};","var Shape = require('./Shape');\n\n/**\n * basic line\n *\n * @class Line\n * @extends GOWN.Shape\n * @memberof GOWN\n * @constructor\n */\n\nfunction Line(color, alpha, width, height, reverse) {\n    Shape.call(this, color, alpha, width, height);\n    this._reverse = reverse;\n}\n\nLine.prototype = Object.create( Shape.prototype );\nLine.prototype.constructor = Line;\nmodule.exports = Line;\n\n/**\n * draw the rect during redraw. will use drawRoundRect if a radius is provided.\n *\n * @method _drawShape\n * @private\n */\nLine.prototype._drawShape = function() {\n    if (this.width <= 0 || this.height <= 0) {\n        return;\n    }\n    if (this.reverse) {\n        this.moveTo(this._width, 0);\n        this.lineTo(0, this._height);\n    } else {\n        this.moveTo(0, 0);\n        this.lineTo(this._width, this._height);\n    }\n};\n\n/**\n * The radius of the rectangle border, setting this will redraw the component.\n *\n * @property color\n * @type Number\n */\nObject.defineProperty(Line.prototype, 'reverse', {\n    get: function() {\n        return this._reverse;\n    },\n    set: function(reverse) {\n        this._reverse = reverse;\n        this.invalid = true;\n    }\n});\n","var Shape = require('./Shape');\n\n/**\n * basic rectangular shape\n *\n * @class Rect\n * @extends GOWN.Shape\n * @memberof GOWN\n * @constructor\n */\n\nfunction Rect(color, alpha, width, height, radius) {\n    Shape.call(this, color, alpha, width, height);\n    this._radius = radius;\n}\n\nRect.prototype = Object.create( Shape.prototype );\nRect.prototype.constructor = Rect;\nmodule.exports = Rect;\n\n/**\n * draw the rect during redraw. will use drawRoundRect if a radius is provided.\n *\n * @method _drawShape\n * @private\n */\nRect.prototype._drawShape = function() {\n    if (this.width <= 0 || this.height <= 0) {\n        return;\n    }\n    if (this.radius) {\n        this.drawRoundedRect(0, 0,\n            this._width, this._height,\n            this.radius);\n    } else {\n        this.drawRect(0, 0, this._width, this._height);\n    }\n};\n\n/**\n * The radius of the rectangle border, setting this will redraw the component.\n *\n * @property color\n * @type Number\n */\nObject.defineProperty(Rect.prototype, 'radius', {\n    get: function() {\n        return this._radius;\n    },\n    set: function(radius) {\n        this._radius = radius;\n        this.invalid = true;\n    }\n});","/**\n * shape base class\n *\n * @class Shape\n * @extends PIXI.Graphics\n * @memberof GOWN\n * @constructor\n */\nfunction Shape(color, alpha, width, height) {\n    PIXI.Graphics.call(this);\n    this._color = color;\n    this._alpha = alpha || 1.0;\n    this._width = width;\n    this._height = height;\n    this.invalid = true;\n}\n\nShape.prototype = Object.create( PIXI.Graphics.prototype );\nShape.prototype.constructor = Shape;\nmodule.exports = Shape;\n\n// setter/getter\n/**\n * The width of the shape, setting this will redraw the component.\n *\n * @property width\n * @type Number\n */\nObject.defineProperty(Shape.prototype, 'width', {\n    get: function() {\n        return this._width;\n    },\n    set: function(width) {\n        this._width = width;\n        this.invalid = true;\n    }\n});\n\n/**\n * The height of the shape, setting this will redraw the component.\n *\n * @property height\n * @type Number\n */\nObject.defineProperty(Shape.prototype, 'height', {\n    get: function() {\n        return this._height;\n    },\n    set: function(height) {\n        this._height = height;\n        this.invalid = true;\n    }\n});\n\n/**\n * The fill color of the shape, setting this will redraw the component.\n *\n * @property color\n * @type Number\n */\n\nObject.defineProperty(Shape.prototype, 'color', {\n    get: function() {\n        return this._color;\n    },\n    set: function(color) {\n        this._color = color;\n        this.invalid = true;\n    }\n});\n\n/**\n * The alpha of the shape, setting this will redraw the component.\n *\n * @property alpha\n * @type Number\n */\n\nObject.defineProperty(Shape.prototype, 'alpha', {\n    get: function() {\n        return this._alpha;\n    },\n    set: function(alpha) {\n        this._alpha = alpha;\n        this.invalid = true;\n    }\n});\n\n/**\n * apply the color to the shape (called during redraw)\n *\n * @method applyColor\n */\nShape.prototype.applyColor = function() {\n    this.beginFill(this.color, this.alpha);\n};\n\n/**\n * apply the border around shape (called during redraw)\n *\n * @method drawBorder\n */\nShape.prototype.drawBorder = function() {\n    if (this.border) {\n        this.lineStyle(this.border, this.borderColor);\n    }\n};\n\n/**\n * draw the shape during redraw. defaults to a simple rect\n *\n * @method _drawShape\n * @private\n */\nShape.prototype._drawShape = function() {\n    if (this.width <= 0 || this.height <= 0) {\n        return;\n    }\n    // default shape is a rect\n    this.drawRect(0, 0, this._width, this._height);\n};\n\n\nShape.prototype.updateTransform = function() {\n    this.redraw();\n\n    PIXI.Graphics.prototype.updateTransform.call(this);\n};\n\n\n/**\n * update before draw call\n * redraw control for current state from theme\n *\n * @method redraw\n */\nShape.prototype.redraw = function() {\n    if(!this.invalid) {\n        return;\n    }\n\n    this.clear();\n    this.applyColor();\n    this.drawBorder();\n    this._drawShape();\n\n    this.invalid = false;\n};\n","var ScaleContainer = require('../../utils/ScaleContainer');\nvar ThemeFont = require('./ThemeFont');\n/**\n * basic theming/skinning.\n *\n * @class Theme\n * @memberof GOWN\n * @constructor\n */\nfunction Theme(global) {\n    // at its core a theme is just a dict that holds a collection of skins\n    this._skins = {};\n\n    // default font for labels (e.g. buttons)\n    this.textStyle = this.textStyle || new ThemeFont();\n    this.textStyle.clone();\n\n    if (global === true || global === undefined) {\n        GOWN.theme = this;\n    }\n    this.textureCache = null;\n    // own skin for scroll/slider track\n    // (uses the default button skin otherwise)\n    this.thumbSkin = true;\n\n    // desktop themes have a hover skin if the mouse moves over the button\n    this.hoverSkin = true;\n}\nmodule.exports = Theme;\n\n/**\n * Set skin for ui component\n *\n * @method setSkin\n * @param comp ui-component that we want to skin, e.g. \"button\" {String}\n * @param id id for the skin (e.g. state when the skinning function will be applied {String}\n * @param skin skin-function that will executed once the component gets updated  {String}\n */\nTheme.prototype.setSkin = function(comp, id, skin) {\n    this._skins[comp] = this._skins[comp] || {};\n    this._skins[comp][id] = skin;\n    // TODO: dispatch event - the skin of \"comp\"\n};\n\n/**\n * Set up the asset loader and load files\n *\n * @method loadImage\n * @param jsonPath {Array}\n */\nTheme.prototype.loadImage = function(jsonPath) {\n    this._jsonPath = jsonPath;\n    GOWN.loader\n        .add(jsonPath)\n        .load(this.loadComplete.bind(this));\n};\n\n/**\n * executed when loadImage has finished\n *\n * @method loadComplete\n */\nTheme.prototype.loadComplete = function(loader, resources) {\n    this.textureCache = resources.resources[this._jsonPath].textures;\n};\n\n/**\n * Create new Scalable Container\n *\n * @method getScaleContainer\n * @param name id defined in the asset loader {String}\n * @param grid grid defining the inner square of the scalable container {Rectangle}\n * @returns {Function}\n */\nTheme.prototype.getScaleContainer = function(name, grid) {\n    var scope = this;\n    return function() {\n        var texture = scope.textureCache[name];\n        if(!texture) {\n            throw new Error('The frameId \"' + name + '\" does not exist ' +\n            'in the texture cache');\n        }\n        return new ScaleContainer(texture, grid);\n\n    };\n};\n\n/**\n * Create new Sprite from image name\n *\n * @method getImage\n * @param name id defined in the asset loader {String}\n * @returns {Function}\n */\nTheme.prototype.getImage = function(name) {\n    var scope = this;\n    return function() {\n        return new PIXI.Sprite(scope.textureCache[name]);\n    };\n};\n\n/**\n * Get skin by component and state (or type)\n *\n * @method getSkin\n * @param comp name of the component (e.g. button) {String}\n * @param state (state or type of the skin e.g. \"up\") {String}\n * @returns {DisplayObject}\n */\nTheme.prototype.getSkin = function(comp, state) {\n    if (this._skins[comp] && this._skins[comp][state]) {\n        return this._skins[comp][state]();\n    }\n    return null;\n};\n\n/**\n * Shortcut to remove the theme from global context\n *\n * @method removeTheme\n */\nTheme.removeTheme = function() {\n    GOWN.theme = undefined;\n};\n","var OPTIONS = ['fontSize', 'fontFamily', 'fill', 'align', 'stroke',\n               'strokeThickness', 'wordWrap', 'wordWrapWidth', 'lineHeight',\n               'dropShadow', 'dropShadowColor', 'dropShadowAngle',\n               'dropShadowDistance', 'padding', 'textBaseline',\n               'lineJoin', 'miterLimit'];\n\n/**\n * @class ThemeFont\n * @memberof GOWN\n * @constructor\n */\nfunction ThemeFont(data) {\n    for(var key in data) {\n        if(OPTIONS.indexOf(key) !== -1) {\n            this[key] = data[key];\n        }\n    }\n\n    this.fill = this.fill || '#000';\n    // default font for label (e.g. buttons)\n    this._fontFamily = this._fontFamily || 'Arial';\n    this._fontSize = this._fontSize || 12;\n}\n\nmodule.exports = ThemeFont;\n\n\n/**\n * clone ThemeFont instance\n *\n * @method clone\n */\nThemeFont.prototype.clone = function() {\n    var re = new ThemeFont();\n    for(var key in this) {\n        if(OPTIONS.indexOf(key) !== -1) {\n            re[key] = this[key];\n        }\n    }\n    return re;\n};\n\n/**\n * update font string\n *\n * @method _updateFont\n * @private\n */\nThemeFont.prototype._updateFont = function() {\n    this._font = this._fontSize + 'px ' + this._fontFamily;\n};\n\n/**\n * instead of setting font using fontFamily and fontSize is encouraged\n *\n * @property font\n * @type String\n */\nObject.defineProperty(ThemeFont.prototype, 'font', {\n    get: function() {\n        return this._font;\n    }\n});\n\n\n/**\n * Font Size\n *\n * @property fontSize\n * @type Number\n */\nObject.defineProperty(ThemeFont.prototype, 'fontSize', {\n    get: function() {\n        return this._fontSize;\n    },\n    set: function(value) {\n        this._fontSize = value;\n        this._updateFont();\n    }\n});\n\n\n/**\n * Font Familiy\n *\n * @property fontFamily\n * @type String\n */\nObject.defineProperty(ThemeFont.prototype, 'fontFamily', {\n    get: function() {\n        return this._fontFamily;\n    },\n    set: function(value) {\n        this._fontFamily = value;\n        this._updateFont();\n    }\n});\n","/**\n * Wrapper for DOM Text Input\n *\n * based on PIXI.Input InputObject by Sebastian Nette,\n * see https://github.com/SebastianNette/PIXI.Input\n *\n * @class InputWrapper\n * @memberof GOWN\n * @static\n */\nfunction InputWrapper()\n{\n}\nmodule.exports = InputWrapper;\n\n/**\n * DOM input field.\n * we use one input field for all InputControls\n *\n * @property hiddenInput\n * @type DOMObject\n * @static\n */\nInputWrapper.hiddenInput = null;\n\n/**\n * create/return unique input field.\n * @returns {DOMObject}\n */\nInputWrapper.createInput = function()\n{\n    if (!InputWrapper.hiddenInput) {\n        var input = document.createElement('input');\n        input.type = 'text';\n        input.tabindex = -1;\n        input.style.position = 'fixed';\n        input.style.opacity = 0;\n        input.style.pointerEvents = 'none';\n        input.style.left = '0px';\n        input.style.bottom = '0px';\n        input.style.left = '-100px';\n        input.style.top = '-100px';\n        input.style.zIndex = 10;\n\n        // add blur handler\n        input.addEventListener('blur', function()\n        {\n            if (GOWN.InputControl.currentInput)\n            {\n                GOWN.InputControl.currentInput.onMouseUpOutside();\n            }\n        }, false);\n\n        // on key down\n        input.addEventListener('keydown', function(e)\n        {\n            if (GOWN.InputControl.currentInput)\n            {\n                e = e || window.event;\n                if (GOWN.InputControl.currentInput.hasFocus)\n                {\n                    GOWN.InputControl.currentInput.onKeyDown(e);\n                }\n            }\n        });\n\n        // on key up\n        input.addEventListener('keyup', function(e)\n        {\n            if(GOWN.InputControl.currentInput)\n            {\n                e = e || window.event;\n                if (GOWN.InputControl.currentInput.hasFocus)\n                {\n                    GOWN.InputControl.currentInput.onKeyUp(e);\n                }\n            }\n        });\n\n        document.body.appendChild(input);\n\n        InputWrapper.hiddenInput = input;\n    }\n    return InputWrapper.hiddenInput;\n};\n\n/**\n * key to get text ('value' for default input field)\n * @type {string}\n * @static\n * @private\n */\nInputWrapper.textProp = 'value';\n\n/**\n * activate the text input\n */\nInputWrapper.focus = function()\n{\n    if (InputWrapper.hiddenInput) {\n        InputWrapper.hiddenInput.focus();\n    }\n};\n\n/**\n * deactivate the text input\n */\nInputWrapper.blur = function()\n{\n    if (InputWrapper.hiddenInput) {\n        InputWrapper.hiddenInput.blur();\n    }\n};\n\n\n/**\n * set selection\n * @returns {DOMObject}\n */\nInputWrapper.setSelection = function(start, end)\n{\n    if (InputWrapper.hiddenInput) {\n        InputWrapper.hiddenInput.selectionStart = start;\n        InputWrapper.hiddenInput.selectionEnd = end;\n    } else {\n        InputWrapper._selection = [start, end];\n    }\n};\n\n/**\n * get start and end of selection\n * @returns {Array}\n */\nInputWrapper.getSelection = function() {\n    if (InputWrapper.hiddenInput) {\n        return [\n            InputWrapper.hiddenInput.selectionStart,\n            InputWrapper.hiddenInput.selectionEnd\n        ];\n    } else {\n        return InputWrapper._selection;\n    }\n};\n\n/**\n * get text value from hiddenInput\n * @returns {String}\n */\nInputWrapper.getText = function() {\n    if (InputWrapper.hiddenInput) {\n        var textProp = InputWrapper.textProp;\n        var txt = InputWrapper.hiddenInput[textProp];\n        return txt.replace(/\\r/g, '');\n    } else {\n        return InputWrapper._text;\n    }\n\n};\n\n/**\n * get text value to hiddenInput\n * @param {String} text\n */\nInputWrapper.setText = function(text) {\n    if (InputWrapper.hiddenInput) {\n        var textProp = InputWrapper.textProp;\n        InputWrapper.hiddenInput[textProp] = text;\n    } else {\n        InputWrapper._text = text;\n    }\n};\n\n/**\n * set max. length setting it to 0 will allow unlimited text input\n * @param length\n */\nInputWrapper.setMaxLength = function(length) {\n    if (InputWrapper.hiddenInput) {\n        if (!length || length < 0) {\n            InputWrapper.hiddenInput.removeAttribute('maxlength');\n        } else {\n            InputWrapper.hiddenInput.setAttribute('maxlength', length);\n        }\n    } else {\n        InputWrapper._maxLength = length;\n    }\n};\n\nInputWrapper.setType = function(type) {\n    if (InputWrapper.hiddenInput) {\n        InputWrapper.hiddenInput.type = type;\n    } else {\n        InputWrapper._type = type;\n    }\n};\n\nInputWrapper.getType = function() {\n    if (InputWrapper.hiddenInput) {\n        return InputWrapper.hiddenInput.type;\n    } else {\n        return InputWrapper._type;\n    }\n};","/**\n * Scale 9 Container.\n * e.g. useful for scalable buttons.\n *\n * @class ScaleContainer\n * @extends PIXI.Container\n * @memberof GOWN\n * @constructor\n */\n\nfunction ScaleContainer(texture, rect) {\n    PIXI.Container.call( this );\n\n    this.rect = rect;\n    this.baseTexture = texture.baseTexture;\n    this.frame = texture.frame;\n\n    this._width = this.frame.width;\n    this._height = this.frame.height;\n\n    // left / middle / right width\n    var lw = rect.x;\n    var mw = rect.width;\n    var rw = this.frame.width - (mw + lw);\n\n    // top / center / bottom height\n    var th = rect.y;\n    var ch = rect.height;\n    var bh = this.frame.height - (ch + th);\n\n    // top\n    if (lw > 0 && th > 0) {\n        this.tl = this._getTexture(0, 0, lw, th);\n        this.addChild(this.tl);\n    }\n    if (mw > 0 && th > 0) {\n        this.tm = this._getTexture(lw, 0, mw, th);\n        this.addChild(this.tm);\n        this.tm.x = lw;\n    }\n    if (rw > 0 && th > 0) {\n        this.tr = this._getTexture(lw + mw, 0, rw, th);\n        this.addChild(this.tr);\n    }\n\n    // center\n    if (lw > 0 && ch > 0) {\n        this.cl = this._getTexture(0, th, lw, ch);\n        this.addChild(this.cl);\n        this.cl.y = th;\n    }\n    if (mw > 0 && ch > 0) {\n        this.cm = this._getTexture(lw, th, mw, ch);\n        this.addChild(this.cm);\n        this.cm.y = th;\n        this.cm.x = lw;\n    }\n    if (rw > 0 && ch > 0) {\n        this.cr = this._getTexture(lw + mw, th, rw, ch);\n        this.addChild(this.cr);\n        this.cr.y = th;\n    }\n\n    // bottom\n    if (lw > 0 && bh > 0) {\n        this.bl = this._getTexture(0, th + ch, lw, bh);\n        this.addChild(this.bl);\n    }\n    if (mw > 0 && bh > 0) {\n        this.bm = this._getTexture(lw, th + ch, mw, bh);\n        this.addChild(this.bm);\n        this.bm.x = lw;\n    }\n    if (rw > 0 && bh > 0) {\n        this.br = this._getTexture(lw + mw, th + ch, rw, bh);\n        this.addChild(this.br);\n    }\n}\n\n// constructor\nScaleContainer.prototype = Object.create( PIXI.Container.prototype );\nScaleContainer.prototype.constructor = ScaleContainer;\nmodule.exports = ScaleContainer;\n\n/**\n * set scaling width and height\n *\n * @method _updateScales\n * @private\n */\nScaleContainer.prototype._updateScales = function() {\n    this._positionTilable();\n\n    var scaleOriginals = this.scaleOriginals = {};\n\n    var scaleOriginal = function(name, elem) {\n        if (elem && elem.width && elem.height) {\n            scaleOriginals[name] = {\n                width: elem.width,\n                height: elem.height\n            };\n        }\n    };\n\n    scaleOriginal('tl', this.tl);\n    scaleOriginal('tm', this.tm);\n    scaleOriginal('tr', this.tr);\n\n    scaleOriginal('cl', this.cl);\n    scaleOriginal('cm', this.cm);\n    scaleOriginal('cr', this.cr);\n\n    scaleOriginal('bl', this.bl);\n    scaleOriginal('bm', this.bm);\n    scaleOriginal('br', this.br);\n};\n\n/**\n * create a new texture from a base-texture by given dimensions\n *\n * @method _getTexture\n * @private\n */\nScaleContainer.prototype._getTexture = function(x, y, w, h) {\n    var frame = new PIXI.Rectangle(this.frame.x+x, this.frame.y+y, w, h);\n    var t = new PIXI.Texture(this.baseTexture, frame, frame.clone(), null);\n    return new PIXI.Sprite(t);\n};\n\n/**\n * The width of the container, setting this will redraw the component.\n *\n * @property width\n * @type Number\n */\nObject.defineProperty(ScaleContainer.prototype, 'width', {\n    get: function() {\n        return this._width;\n    },\n    set: function(value) {\n        if (this._width !== value) {\n            this._width = value;\n            this.invalid = true;\n            this._updateScales();\n        }\n    }\n});\n\n/**\n * The height of the container, setting this will redraw the component.\n *\n * @property height\n * @type Number\n */\nObject.defineProperty(ScaleContainer.prototype, 'height', {\n    get: function() {\n        return this._height;\n    },\n    set: function(value) {\n        if (this._height !== value) {\n            this._height = value;\n            this.invalid = true;\n            this._updateScales();\n        }\n    }\n});\n\n/**\n * update before draw call (reposition textures)\n *\n * @method redraw\n */\nScaleContainer.prototype.redraw = function() {\n    if (this.invalid) {\n        this._positionTilable();\n        this.invalid = false;\n    }\n};\n\n/**\n * recalculate the position of the tiles (every time width/height changes)\n *\n * @method _positionTilable\n * @private\n */\nScaleContainer.prototype._positionTilable = function() {\n    // left / middle / right width\n    var lw = this.rect.x;\n    var mw = this.rect.width;\n    var rw = this.frame.width - (mw + lw);\n\n    // top / center / bottom height\n    var th = this.rect.y;\n    var ch = this.rect.height;\n    var bh = this.frame.height - (ch + th);\n\n    var rightX = this._width - rw;\n    var bottomY = this._height - bh;\n    if (this.cr) {\n        this.cr.x = rightX;\n    }\n    if (this.br) {\n        this.br.x = rightX;\n        this.br.y = bottomY;\n    }\n    if (this.tr) {\n        this.tr.x = rightX;\n    }\n\n    var middleWidth = this._width - (lw + rw);\n    var centerHeight = this._height - (th + bh);\n    if (this.cm) {\n        this.cm.width = middleWidth;\n        this.cm.height = centerHeight;\n    }\n    if (this.bm) {\n        this.bm.width = middleWidth;\n        this.bm.y = bottomY;\n    }\n    if (this.tm) {\n        this.tm.width = middleWidth;\n    }\n    if (this.cl) {\n        this.cl.height = centerHeight;\n    }\n    if (this.cr) {\n        this.cr.height = centerHeight;\n    }\n\n    if (this.bl) {\n        this.bl.y = bottomY;\n    }\n};\n\n/**\n *\n * Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId\n * The frame ids are created when a Texture packer file has been loaded\n *\n * @method fromFrame\n * @static\n * @param frameId {String} The frame Id of the texture in the cache\n * @param rect {Rectangle} defines tilable area\n * @return {ScaleTexture} A new Scalable Texture (e.g. a button) using a texture from the texture cache matching the frameId\n */\nScaleContainer.fromFrame = function(frameId, rect) {\n    var texture = PIXI.utils.TextureCache[frameId];\n    if(!texture) {\n        throw new Error('The frameId \"' + frameId + '\" does not exist ' +\n                        'in the texture cache');\n    }\n    return new ScaleContainer(texture, rect);\n};\n","/**\n * Holds all information related to a Slider change event\n *\n * @class SliderData\n * @memberof GOWN\n * @constructor\n */\nfunction SliderData()\n{\n    this.value = 0;\n    /**\n     * The target Sprite that was interacted with\n     *\n     * @property target\n     * @type Sprite\n     */\n    this.target = null;\n}\n\nmodule.exports = SliderData;\n","/**\n * @file        Main export of the gown.js util library\n * @author      Andreas Bresser <andreasbresser@gmail.com>\n * @copyright   2015 Andreas Bresser\n * @license     {@link https://github.com/brean/gown.js/blob/master/LICENSE|Apache License}\n */\n\n/**\n * @namespace GOWN.util\n */\nmodule.exports = {\n    InputWrapper:           require('./InputWrapper'),\n    mouseWheelSupport:      require('./mouseWheelSupport'),\n    position:               require('./position'),\n    ScaleContainer:         require('./ScaleContainer'),\n    SliderData:             require('./SliderData'),\n    resizeScaling:          require('./resizeScaling'),\n    mixin:                  require('./mixin')\n};\n","module.exports = function(destination, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            if(key === 'defineProperty') {\n                for(var name in source[key]) {\n                    Object.defineProperty(destination, name, source[key][name]);\n                }\n            } else {\n                destination[key] = source[key];\n            }\n        }\n    }\n    return destination;\n};\n","/**\n * TODO: make it work with PIXI (this is just copied from createjs_ui / WIP)\n * (e.g. get currently selected object using this.stage.interactionManager.hitTest(this, e)\n * and then execute an \"onwheel\"-callback)\n *\n * enable or disable mouse wheel support for canvas (e.g. for scroller)\n * using HTML 5 scrolling. will do nothing if it is already activated/\n * deactivated\n * based on http://www.sitepoint.com/html5-javascript-mouse-wheel/\n * @param stage the PIXI-stage\n * @param enable true to enable mouse support, false to disable,\n */\nfunction mouseWheelSupport(stage, enable) {\n    var canvas = stage.canvas;\n    if (enable || enable === undefined) {\n        if (GOWN._mouseWheelHandler !== undefined) {\n            return;\n        }\n        GOWN._mouseWheelHandler = function(event) {\n            event = window.event || event;\n            var delta = Math.max(-1, Math.min(1,\n                (event.wheelDelta || -event.detail)));\n\n            var target = stage.getObjectsUnderPoint(stage.mouseX, stage.mouseY, 1);\n            if (!target) {\n                return;\n            }\n            for(var i = 0; i < target.length; i++) {\n                var t = target[i];\n                t.mouseMove(delta);\n                /*\n                var evt = new createjs.MouseEvent(\n                    \"mousewheel\", true, false,\n                    t.x, t.y, event, -1, true, t.rawX, t.rawY);\n                evt.delta = delta;\n                t.dispatchEvent(evt);\n                */\n            }\n        };\n        if (canvas.addEventListener) {\n            canvas.addEventListener('mousewheel',\n                GOWN._mouseWheelHandler, false);\n            canvas.addEventListener('DOMMouseScroll',\n                GOWN._mouseWheelHandler, false);\n        } else {\n            canvas.attachEvent('onmousewheel',\n                GOWN._mouseWheelHandler);\n        }\n    } else {\n        if (GOWN._mouseWheelHandler === undefined) {\n            return;\n        }\n        if (canvas.removeEventListener) {\n            canvas.removeEventListener('mousewheel',\n                GOWN._mouseWheelHandler);\n            canvas.removeEventListener('DOMMouseScroll',\n                GOWN._mouseWheelHandler);\n        } else {\n            canvas.detachEvent('onmousewheel',\n                GOWN._mouseWheelHandler);\n        }\n        GOWN._mouseWheelHandler = undefined;\n    }\n}\n\nmodule.exports = mouseWheelSupport;","/**\n * center element on parent vertically\n * @param elem\n * @param parent (optional)\n * @method centerVertical\n */\nfunction centerVertical(elem, parent) {\n    parent = parent || elem.parent;\n    elem.y = Math.floor((parent.height - elem.height ) / 2);\n}\n\n/**\n *\n * @param elem\n * @param parent (optional)\n */\nfunction bottom(elem, parent) {\n    parent = parent || elem.parent;\n    elem.y = parent.height - elem.height;\n}\n\n/**\n * center element on parent horizontally\n * @param elem\n * @param parent (optional)\n * @method centerHorizontal\n */\nfunction centerHorizontal(elem, parent) {\n    parent = parent || elem.parent;\n    elem.x = Math.floor((parent.width - elem.width ) / 2);\n}\n\n\n/**\n * center element on parent\n * @param elem\n * @param parent (optional)\n * @method center\n */\nfunction center(elem, parent) {\n    centerVertical(elem, parent);\n    centerHorizontal(elem, parent);\n}\n\n\nmodule.exports = {\n    centerHorizontal: centerHorizontal,\n    centerVertical: centerVertical,\n    center: center,\n    bottom: bottom\n};","\nmodule.exports = {\n    /**\n     * this should be called from inside the constructor\n     *\n     * @method initResizeScaling\n     */\n    initResizeScaling: function() {\n        this.resizeScaling = true; // resize instead of scale\n\n        this.minWidth = 1;\n        this.minHeight = 1;\n\n        // update dimension flag\n        this._lastWidth = NaN;\n        this._lastHeight = NaN;\n    },\n\n    /**\n     * update before draw call\n     * redraw control for current state from theme\n     *\n     * @method redraw\n     */\n    redraw: function() {\n        // remove last skin after new one has been added\n        // (just before rendering, otherwise we would see nothing for a frame)\n        if (this._lastSkin) {\n            //this.removeChild(this._lastSkin);\n            this._lastSkin.alpha = 0;\n            this._lastSkin = null;\n        }\n        if (this.invalidState) {\n            this.fromSkin(this._currentState, this.changeSkin);\n        }\n        var width = this.worldWidth;\n        var height = this.worldHeight;\n        if (this._currentSkin &&\n            (this._lastWidth !== width || this._lastHeight !== height) &&\n            width > 0 && height > 0) {\n\n            this._currentSkin.width = this._lastWidth = width;\n            this._currentSkin.height = this._lastHeight = height;\n            this.updateDimensions();\n        }\n    },\n\n    updateDimensions: function() {\n    },\n\n\n    updateTransform: function() {\n        var wt = this.worldTransform;\n        var scaleX = 1;\n        var scaleY = 1;\n\n        if(this.redraw) {\n\n            if(this.resizeScaling) {\n                var pt = this.parent.worldTransform;\n\n                scaleX = Math.sqrt(Math.pow(pt.a, 2) + Math.pow(pt.b, 2));\n                scaleY = Math.sqrt(Math.pow(pt.c, 2) + Math.pow(pt.d, 2));\n            }\n\n            this.worldWidth = Math.round(Math.max(this._width * scaleX, this.minWidth));\n            this.worldHeight = Math.round(Math.max(this._height * scaleY, this.minHeight));\n            this.redraw();\n        }\n\n        // obmit Control.updateTransform as it calls redraw as well\n        if(!this.resizeScaling) {\n            PIXI.Container.prototype.updateTransform.call(this);\n        } else {\n            PIXI.DisplayObject.prototype.updateTransform.call(this);\n\n            // revert scaling\n            var tx = wt.tx;\n            var ty = wt.ty;\n            scaleX = scaleX !== 0 ? 1/scaleX : 0;\n            scaleY = scaleY !== 0 ? 1/scaleY : 0;\n            wt.scale(scaleX, scaleY);\n            wt.tx = tx;\n            wt.ty = ty;\n\n            for (var i = 0, j = this.children.length; i < j; ++i) {\n                this.children[i].updateTransform();\n            }\n        }\n    },\n\n    defineProperty: {\n\n            'height': {\n                get: function() {\n                    return this._height;\n                },\n                set: function(value) {\n                    this._height = value;\n                    this.minHeight = Math.min(value, this.minHeight);\n                }\n            },\n            'width': {\n                get: function() {\n                    return this._width;\n                },\n                set: function(value) {\n                    this._width = value;\n                    this.minWidth = Math.min(value, this.minWidth);\n                }\n            }\n    }\n};\n"]}